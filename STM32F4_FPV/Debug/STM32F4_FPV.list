
STM32F4_FPV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009d74  08009d74  00019d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed4  08009ed4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009edc  08009edc  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ee0  08009ee0  00019ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  200000fc  08009fe0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001574  08009fe0  00021574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014413  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003461  00000000  00000000  0003453f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000379a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  000389c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199a2  00000000  00000000  00039870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001620c  00000000  00000000  00053212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3a4  00000000  00000000  0006941e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f87c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041dc  00000000  00000000  000f8814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009d5c 	.word	0x08009d5c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08009d5c 	.word	0x08009d5c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b0c8      	sub	sp, #288	; 0x120
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 facb 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f887 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f947 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ea:	f000 f8f1 	bl	80006d0 <MX_I2C1_Init>
  MX_RTC_Init();
 80004ee:	f000 f91d 	bl	800072c <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80004f2:	f008 ff1d 	bl	8009330 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data;
  uint8_t status = mpu6500_accelSelfTest();
 80004f6:	f006 ff89 	bl	800740c <mpu6500_accelSelfTest>
 80004fa:	4603      	mov	r3, r0
 80004fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  status = mpu6500_readReg(MPU6500_WHO_AM_I, &data);
 8000500:	f207 1317 	addw	r3, r7, #279	; 0x117
 8000504:	4619      	mov	r1, r3
 8000506:	2075      	movs	r0, #117	; 0x75
 8000508:	f006 ff12 	bl	8007330 <mpu6500_readReg>
 800050c:	4603      	mov	r3, r0
 800050e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  status = mpu6500_readReg(MPU6500_PWR_MGMT_1, &data);
 8000512:	f207 1317 	addw	r3, r7, #279	; 0x117
 8000516:	4619      	mov	r1, r3
 8000518:	206b      	movs	r0, #107	; 0x6b
 800051a:	f006 ff09 	bl	8007330 <mpu6500_readReg>
 800051e:	4603      	mov	r3, r0
 8000520:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  status = mpu6500_writeReg(MPU6500_PWR_MGMT_1, 0x01);
 8000524:	2101      	movs	r1, #1
 8000526:	206b      	movs	r0, #107	; 0x6b
 8000528:	f006 ff4a 	bl	80073c0 <mpu6500_writeReg>
 800052c:	4603      	mov	r3, r0
 800052e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  status = mpu6500_readReg(MPU6500_PWR_MGMT_1, &data);
 8000532:	f207 1317 	addw	r3, r7, #279	; 0x117
 8000536:	4619      	mov	r1, r3
 8000538:	206b      	movs	r0, #107	; 0x6b
 800053a:	f006 fef9 	bl	8007330 <mpu6500_readReg>
 800053e:	4603      	mov	r3, r0
 8000540:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  status = mpu6500_readReg(MPU6500_PWR_MGMT_2, &data);
 8000544:	f207 1317 	addw	r3, r7, #279	; 0x117
 8000548:	4619      	mov	r1, r3
 800054a:	206c      	movs	r0, #108	; 0x6c
 800054c:	f006 fef0 	bl	8007330 <mpu6500_readReg>
 8000550:	4603      	mov	r3, r0
 8000552:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint8_t memData[16];
  status = mpu6500_readMem(MPU6500_ACCEL_XOUT_H, 6, memData);
 8000556:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800055a:	461a      	mov	r2, r3
 800055c:	2106      	movs	r1, #6
 800055e:	203b      	movs	r0, #59	; 0x3b
 8000560:	f006 ff08 	bl	8007374 <mpu6500_readMem>
 8000564:	4603      	mov	r3, r0
 8000566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t vcpBuf[256] = "Hello world\n\r";
 800056a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800056e:	f5a3 758e 	sub.w	r5, r3, #284	; 0x11c
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <main+0x118>)
 8000574:	462c      	mov	r4, r5
 8000576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000578:	c407      	stmia	r4!, {r0, r1, r2}
 800057a:	8023      	strh	r3, [r4, #0]
 800057c:	f105 030e 	add.w	r3, r5, #14
 8000580:	22f2      	movs	r2, #242	; 0xf2
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f009 fbe1 	bl	8009d4c <memset>
  while (1)
  {
	  status = mpu6500_readMem(MPU6500_ACCEL_XOUT_H, 16, memData);
 800058a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800058e:	461a      	mov	r2, r3
 8000590:	2110      	movs	r1, #16
 8000592:	203b      	movs	r0, #59	; 0x3b
 8000594:	f006 feee 	bl	8007374 <mpu6500_readMem>
 8000598:	4603      	mov	r3, r0
 800059a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  int16_t valx = (memData[0] << 8) + memData[1];
 800059e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
	  int16_t valy = (memData[2] << 8) + memData[3];
 80005b6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
	  int16_t valz = (memData[4] << 8) + memData[5];
 80005ce:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80005dc:	b29b      	uxth	r3, r3
 80005de:	4413      	add	r3, r2
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	  HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f000 fab7 	bl	8000b5c <HAL_Delay>
  {
 80005ee:	e7cc      	b.n	800058a <main+0xb2>
 80005f0:	08009d74 	.word	0x08009d74

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 fba2 	bl	8009d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a29      	ldr	r2, [pc, #164]	; (80006c8 <SystemClock_Config+0xd4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xd4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xd8>)
 8000642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xd8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000654:	2305      	movs	r3, #5
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066c:	2319      	movs	r3, #25
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fcda 	bl	800503c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800068e:	f000 f8b7 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 ff3c 	bl	800552c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ba:	f000 f8a1 	bl	8000800 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f000 fd0f 	bl	8001130 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f872 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000118 	.word	0x20000118
 8000724:	40005400 	.word	0x40005400
 8000728:	00061a80 	.word	0x00061a80

0800072c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_RTC_Init+0x44>)
 8000732:	4a10      	ldr	r2, [pc, #64]	; (8000774 <MX_RTC_Init+0x48>)
 8000734:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_RTC_Init+0x44>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_RTC_Init+0x44>)
 800073e:	227f      	movs	r2, #127	; 0x7f
 8000740:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_RTC_Init+0x44>)
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_RTC_Init+0x44>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_RTC_Init+0x44>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_RTC_Init+0x44>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_RTC_Init+0x44>)
 800075c:	f005 f9a0 	bl	8005aa0 <HAL_RTC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000766:	f000 f84b 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000016c 	.word	0x2000016c
 8000774:	40002800 	.word	0x40002800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_GPIO_Init+0x84>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_GPIO_Init+0x84>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_GPIO_Init+0x84>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <MX_GPIO_Init+0x84>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_GPIO_Init+0x84>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_GPIO_Init+0x84>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_GPIO_Init+0x84>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_GPIO_Init+0x84>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_GPIO_Init+0x84>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <MX_GPIO_Init+0x84>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_GPIO_Init+0x84>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a24      	ldr	r2, [pc, #144]	; (800090c <HAL_I2C_MspInit+0xb0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d141      	bne.n	8000902 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a22      	ldr	r2, [pc, #136]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800089a:	23c0      	movs	r3, #192	; 0xc0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089e:	2312      	movs	r3, #18
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008aa:	2304      	movs	r3, #4
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4817      	ldr	r0, [pc, #92]	; (8000914 <HAL_I2C_MspInit+0xb8>)
 80008b6:	f000 fab7 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_I2C_MspInit+0xb4>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	201f      	movs	r0, #31
 80008dc:	f000 fa3d 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008e0:	201f      	movs	r0, #31
 80008e2:	f000 fa56 	bl	8000d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2020      	movs	r0, #32
 80008ec:	f000 fa35 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008f0:	2020      	movs	r0, #32
 80008f2:	f000 fa4e 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */
    I2C1->CR1 |= (1 << 15); // SWRST
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_I2C_MspInit+0xb0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_I2C_MspInit+0xb0>)
 80008fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000900:	6013      	str	r3, [r2, #0]
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40005400 	.word	0x40005400
 8000910:	40023800 	.word	0x40023800
 8000914:	40020400 	.word	0x40020400

08000918 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <HAL_RTC_MspInit+0x50>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d111      	bne.n	800095e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800093a:	2302      	movs	r3, #2
 800093c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800093e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000942:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4618      	mov	r0, r3
 800094a:	f004 ffbb 	bl	80058c4 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000954:	f7ff ff54 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <HAL_RTC_MspInit+0x54>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40002800 	.word	0x40002800
 800096c:	42470e3c 	.word	0x42470e3c

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8ae 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <I2C1_EV_IRQHandler+0x10>)
 80009ca:	f001 f837 	bl	8001a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000118 	.word	0x20000118

080009d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <I2C1_ER_IRQHandler+0x10>)
 80009de:	f001 f99e 	bl	8001d1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000118 	.word	0x20000118

080009ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <OTG_FS_IRQHandler+0x10>)
 80009f2:	f003 fa16 	bl	8003e22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000e70 	.word	0x20000e70

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f009 f957 	bl	8009d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd3f 	bl	80004d8 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a68:	08009ee4 	.word	0x08009ee4
  ldr r2, =_sbss
 8000a6c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a70:	20001574 	.word	0x20001574

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f94f 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff feae 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f967 	bl	8000dae <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f92f 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	2000018c 	.word	0x2000018c

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000018c 	.word	0x2000018c

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_Delay+0x44>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d004      	beq.n	8000de4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e00c      	b.n	8000dfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2205      	movs	r2, #5
 8000de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e18:	b2db      	uxtb	r3, r3
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e159      	b.n	80010f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f040 8148 	bne.w	80010f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d005      	beq.n	8000e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d130      	bne.n	8000edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 0201 	and.w	r2, r3, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d017      	beq.n	8000f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d123      	bne.n	8000f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0203 	and.w	r2, r3, #3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80a2 	beq.w	80010f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a56      	ldr	r2, [pc, #344]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b54      	ldr	r3, [pc, #336]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fca:	4a52      	ldr	r2, [pc, #328]	; (8001114 <HAL_GPIO_Init+0x2ec>)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x202>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a48      	ldr	r2, [pc, #288]	; (800111c <HAL_GPIO_Init+0x2f4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x1fe>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a47      	ldr	r2, [pc, #284]	; (8001120 <HAL_GPIO_Init+0x2f8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x1fa>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <HAL_GPIO_Init+0x2fc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x1f6>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a45      	ldr	r2, [pc, #276]	; (8001128 <HAL_GPIO_Init+0x300>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x1f2>
 8001016:	2304      	movs	r3, #4
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x204>
 800101a:	2307      	movs	r3, #7
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x204>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x204>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x204>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x204>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x2ec>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_GPIO_Init+0x304>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106e:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_GPIO_Init+0x304>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_GPIO_Init+0x304>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001098:	4a24      	ldr	r2, [pc, #144]	; (800112c <HAL_GPIO_Init+0x304>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_GPIO_Init+0x304>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_GPIO_Init+0x304>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_GPIO_Init+0x304>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ec:	4a0f      	ldr	r2, [pc, #60]	; (800112c <HAL_GPIO_Init+0x304>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f aea2 	bls.w	8000e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e12b      	b.n	800139a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fb80 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001194:	f004 fb82 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8001198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a81      	ldr	r2, [pc, #516]	; (80013a4 <HAL_I2C_Init+0x274>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d807      	bhi.n	80011b4 <HAL_I2C_Init+0x84>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <HAL_I2C_Init+0x278>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	bf94      	ite	ls
 80011ac:	2301      	movls	r3, #1
 80011ae:	2300      	movhi	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	e006      	b.n	80011c2 <HAL_I2C_Init+0x92>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a7d      	ldr	r2, [pc, #500]	; (80013ac <HAL_I2C_Init+0x27c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	bf94      	ite	ls
 80011bc:	2301      	movls	r3, #1
 80011be:	2300      	movhi	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0e7      	b.n	800139a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4a78      	ldr	r2, [pc, #480]	; (80013b0 <HAL_I2C_Init+0x280>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a6a      	ldr	r2, [pc, #424]	; (80013a4 <HAL_I2C_Init+0x274>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d802      	bhi.n	8001204 <HAL_I2C_Init+0xd4>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3301      	adds	r3, #1
 8001202:	e009      	b.n	8001218 <HAL_I2C_Init+0xe8>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	4a69      	ldr	r2, [pc, #420]	; (80013b4 <HAL_I2C_Init+0x284>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	3301      	adds	r3, #1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	430b      	orrs	r3, r1
 800121e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800122a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	495c      	ldr	r1, [pc, #368]	; (80013a4 <HAL_I2C_Init+0x274>)
 8001234:	428b      	cmp	r3, r1
 8001236:	d819      	bhi.n	800126c <HAL_I2C_Init+0x13c>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1e59      	subs	r1, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fbb1 f3f3 	udiv	r3, r1, r3
 8001246:	1c59      	adds	r1, r3, #1
 8001248:	f640 73fc 	movw	r3, #4092	; 0xffc
 800124c:	400b      	ands	r3, r1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00a      	beq.n	8001268 <HAL_I2C_Init+0x138>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1e59      	subs	r1, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001260:	3301      	adds	r3, #1
 8001262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001266:	e051      	b.n	800130c <HAL_I2C_Init+0x1dc>
 8001268:	2304      	movs	r3, #4
 800126a:	e04f      	b.n	800130c <HAL_I2C_Init+0x1dc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d111      	bne.n	8001298 <HAL_I2C_Init+0x168>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1e58      	subs	r0, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	fbb0 f3f3 	udiv	r3, r0, r3
 8001286:	3301      	adds	r3, #1
 8001288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	e012      	b.n	80012be <HAL_I2C_Init+0x18e>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1e58      	subs	r0, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	0099      	lsls	r1, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ae:	3301      	adds	r3, #1
 80012b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_I2C_Init+0x196>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e022      	b.n	800130c <HAL_I2C_Init+0x1dc>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10e      	bne.n	80012ec <HAL_I2C_Init+0x1bc>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1e58      	subs	r0, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6859      	ldr	r1, [r3, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	440b      	add	r3, r1
 80012dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ea:	e00f      	b.n	800130c <HAL_I2C_Init+0x1dc>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1e58      	subs	r0, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	0099      	lsls	r1, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001302:	3301      	adds	r3, #1
 8001304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	6809      	ldr	r1, [r1, #0]
 8001310:	4313      	orrs	r3, r2
 8001312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800133a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6911      	ldr	r1, [r2, #16]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68d2      	ldr	r2, [r2, #12]
 8001346:	4311      	orrs	r1, r2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	430b      	orrs	r3, r1
 800134e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0201 	orr.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2220      	movs	r2, #32
 8001386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	000186a0 	.word	0x000186a0
 80013a8:	001e847f 	.word	0x001e847f
 80013ac:	003d08ff 	.word	0x003d08ff
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	10624dd3 	.word	0x10624dd3

080013b8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	2b80      	cmp	r3, #128	; 0x80
 80013cc:	d103      	bne.n	80013d6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	4608      	mov	r0, r1
 80013ee:	4611      	mov	r1, r2
 80013f0:	461a      	mov	r2, r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	817b      	strh	r3, [r7, #10]
 80013f6:	460b      	mov	r3, r1
 80013f8:	813b      	strh	r3, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013fe:	f7ff fba1 	bl	8000b44 <HAL_GetTick>
 8001402:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b20      	cmp	r3, #32
 800140e:	f040 80d9 	bne.w	80015c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2319      	movs	r3, #25
 8001418:	2201      	movs	r2, #1
 800141a:	496d      	ldr	r1, [pc, #436]	; (80015d0 <HAL_I2C_Mem_Write+0x1ec>)
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f002 f939 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001428:	2302      	movs	r3, #2
 800142a:	e0cc      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_I2C_Mem_Write+0x56>
 8001436:	2302      	movs	r3, #2
 8001438:	e0c5      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	d007      	beq.n	8001460 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2221      	movs	r2, #33	; 0x21
 8001474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a3a      	ldr	r2, [r7, #32]
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_I2C_Mem_Write+0x1f0>)
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014a2:	88f8      	ldrh	r0, [r7, #6]
 80014a4:	893a      	ldrh	r2, [r7, #8]
 80014a6:	8979      	ldrh	r1, [r7, #10]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f001 fec8 	bl	8003248 <I2C_RequestMemoryWrite>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d052      	beq.n	8001564 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e081      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f002 f9fe 	bl	80038c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d107      	bne.n	80014ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e06b      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001508:	3b01      	subs	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b04      	cmp	r3, #4
 800152a:	d11b      	bne.n	8001564 <HAL_I2C_Mem_Write+0x180>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	d017      	beq.n	8001564 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1aa      	bne.n	80014c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f002 f9f1 	bl	8003958 <I2C_WaitOnBTFFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00d      	beq.n	8001598 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2b04      	cmp	r3, #4
 8001582:	d107      	bne.n	8001594 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001592:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e016      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2220      	movs	r2, #32
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	00100002 	.word	0x00100002
 80015d4:	ffff0000 	.word	0xffff0000

080015d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	817b      	strh	r3, [r7, #10]
 80015ea:	460b      	mov	r3, r1
 80015ec:	813b      	strh	r3, [r7, #8]
 80015ee:	4613      	mov	r3, r2
 80015f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015f2:	f7ff faa7 	bl	8000b44 <HAL_GetTick>
 80015f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b20      	cmp	r3, #32
 8001602:	f040 8214 	bne.w	8001a2e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2319      	movs	r3, #25
 800160c:	2201      	movs	r2, #1
 800160e:	497b      	ldr	r1, [pc, #492]	; (80017fc <HAL_I2C_Mem_Read+0x224>)
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f002 f83f 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800161c:	2302      	movs	r3, #2
 800161e:	e207      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_I2C_Mem_Read+0x56>
 800162a:	2302      	movs	r3, #2
 800162c:	e200      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b01      	cmp	r3, #1
 8001642:	d007      	beq.n	8001654 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2222      	movs	r2, #34	; 0x22
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2240      	movs	r2, #64	; 0x40
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a5b      	ldr	r2, [pc, #364]	; (8001800 <HAL_I2C_Mem_Read+0x228>)
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001696:	88f8      	ldrh	r0, [r7, #6]
 8001698:	893a      	ldrh	r2, [r7, #8]
 800169a:	8979      	ldrh	r1, [r7, #10]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	4603      	mov	r3, r0
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f001 fe64 	bl	8003374 <I2C_RequestMemoryRead>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1bc      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d113      	bne.n	80016e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e190      	b.n	8001a08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d11b      	bne.n	8001726 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e170      	b.n	8001a08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172a:	2b02      	cmp	r3, #2
 800172c:	d11b      	bne.n	8001766 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	e150      	b.n	8001a08 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800177c:	e144      	b.n	8001a08 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	2b03      	cmp	r3, #3
 8001784:	f200 80f1 	bhi.w	800196a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	2b01      	cmp	r3, #1
 800178e:	d123      	bne.n	80017d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f002 f959 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e145      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017d6:	e117      	b.n	8001a08 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d14e      	bne.n	800187e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e6:	2200      	movs	r2, #0
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <HAL_I2C_Mem_Read+0x22c>)
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f001 ff52 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e11a      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
 80017fa:	bf00      	nop
 80017fc:	00100002 	.word	0x00100002
 8001800:	ffff0000 	.word	0xffff0000
 8001804:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001872:	b29b      	uxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800187c:	e0c4      	b.n	8001a08 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001884:	2200      	movs	r2, #0
 8001886:	496c      	ldr	r1, [pc, #432]	; (8001a38 <HAL_I2C_Mem_Read+0x460>)
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f001 ff03 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0cb      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e0:	2200      	movs	r2, #0
 80018e2:	4955      	ldr	r1, [pc, #340]	; (8001a38 <HAL_I2C_Mem_Read+0x460>)
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f001 fed5 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e09d      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001968:	e04e      	b.n	8001a08 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f002 f86c 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e058      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	3b01      	subs	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d124      	bne.n	8001a08 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f aeb6 	bne.w	800177e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	00010004 	.word	0x00010004

08001a3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d003      	beq.n	8001a74 <HAL_I2C_EV_IRQHandler+0x38>
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	2b40      	cmp	r3, #64	; 0x40
 8001a70:	f040 80c1 	bne.w	8001bf6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <HAL_I2C_EV_IRQHandler+0x6e>
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001a94:	d003      	beq.n	8001a9e <HAL_I2C_EV_IRQHandler+0x62>
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001a9c:	d101      	bne.n	8001aa2 <HAL_I2C_EV_IRQHandler+0x66>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_I2C_EV_IRQHandler+0x68>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f000 8132 	beq.w	8001d0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00c      	beq.n	8001ace <HAL_I2C_EV_IRQHandler+0x92>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	0a5b      	lsrs	r3, r3, #9
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f002 f84f 	bl	8003b64 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fd9f 	bl	800260a <I2C_Master_SB>
 8001acc:	e092      	b.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_I2C_EV_IRQHandler+0xb2>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	0a5b      	lsrs	r3, r3, #9
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fe15 	bl	8002716 <I2C_Master_ADD10>
 8001aec:	e082      	b.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_I2C_EV_IRQHandler+0xd2>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	0a5b      	lsrs	r3, r3, #9
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fe2f 	bl	800276a <I2C_Master_ADDR>
 8001b0c:	e072      	b.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03b      	beq.n	8001b92 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b28:	f000 80f3 	beq.w	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	09db      	lsrs	r3, r3, #7
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00f      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x11c>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <HAL_I2C_EV_IRQHandler+0x11c>
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f9f3 	bl	8001f3c <I2C_MasterTransmit_TXE>
 8001b56:	e04d      	b.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80d6 	beq.w	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	0a5b      	lsrs	r3, r3, #9
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80cf 	beq.w	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	2b21      	cmp	r3, #33	; 0x21
 8001b78:	d103      	bne.n	8001b82 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fa7a 	bl	8002074 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b80:	e0c7      	b.n	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b40      	cmp	r3, #64	; 0x40
 8001b86:	f040 80c4 	bne.w	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fae8 	bl	8002160 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b90:	e0bf      	b.n	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ba0:	f000 80b7 	beq.w	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00f      	beq.n	8001bd0 <HAL_I2C_EV_IRQHandler+0x194>
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_I2C_EV_IRQHandler+0x194>
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d103      	bne.n	8001bd0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fb61 	bl	8002290 <I2C_MasterReceive_RXNE>
 8001bce:	e011      	b.n	8001bf4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 809a 	beq.w	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	0a5b      	lsrs	r3, r3, #9
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8093 	beq.w	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fc17 	bl	8002420 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bf2:	e08e      	b.n	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001bf4:	e08d      	b.n	8001d12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e007      	b.n	8001c18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d012      	beq.n	8001c4a <HAL_I2C_EV_IRQHandler+0x20e>
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	0a5b      	lsrs	r3, r3, #9
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00c      	beq.n	8001c4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001c40:	69b9      	ldr	r1, [r7, #24]
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 ffe0 	bl	8002c08 <I2C_Slave_ADDR>
 8001c48:	e066      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_I2C_EV_IRQHandler+0x22e>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	0a5b      	lsrs	r3, r3, #9
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f001 f81a 	bl	8002c9c <I2C_Slave_STOPF>
 8001c68:	e056      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	2b21      	cmp	r3, #33	; 0x21
 8001c6e:	d002      	beq.n	8001c76 <HAL_I2C_EV_IRQHandler+0x23a>
 8001c70:	7bbb      	ldrb	r3, [r7, #14]
 8001c72:	2b29      	cmp	r3, #41	; 0x29
 8001c74:	d125      	bne.n	8001cc2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	09db      	lsrs	r3, r3, #7
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00f      	beq.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x266>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	0a9b      	lsrs	r3, r3, #10
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x266>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d103      	bne.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fef6 	bl	8002a8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ca0:	e039      	b.n	8001d16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d033      	beq.n	8001d16 <HAL_I2C_EV_IRQHandler+0x2da>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	0a5b      	lsrs	r3, r3, #9
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d02d      	beq.n	8001d16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 ff23 	bl	8002b06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cc0:	e029      	b.n	8001d16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00f      	beq.n	8001cee <HAL_I2C_EV_IRQHandler+0x2b2>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	0a9b      	lsrs	r3, r3, #10
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_I2C_EV_IRQHandler+0x2b2>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 ff2e 	bl	8002b48 <I2C_SlaveReceive_RXNE>
 8001cec:	e014      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00e      	beq.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	0a5b      	lsrs	r3, r3, #9
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 ff5c 	bl	8002bc4 <I2C_SlaveReceive_BTF>
 8001d0c:	e004      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001d0e:	bf00      	nop
 8001d10:	e002      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b08a      	sub	sp, #40	; 0x28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d40:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00e      	beq.n	8001d6c <HAL_I2C_ER_IRQHandler+0x4e>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d6a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	0a5b      	lsrs	r3, r3, #9
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00e      	beq.n	8001d96 <HAL_I2C_ER_IRQHandler+0x78>
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001d94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	0a9b      	lsrs	r3, r3, #10
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03f      	beq.n	8001e22 <HAL_I2C_ER_IRQHandler+0x104>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d039      	beq.n	8001e22 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001dae:	7efb      	ldrb	r3, [r7, #27]
 8001db0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001dc8:	7ebb      	ldrb	r3, [r7, #26]
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d112      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xd6>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xd6>
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	2b21      	cmp	r3, #33	; 0x21
 8001dd8:	d008      	beq.n	8001dec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001dda:	7cfb      	ldrb	r3, [r7, #19]
 8001ddc:	2b29      	cmp	r3, #41	; 0x29
 8001dde:	d005      	beq.n	8001dec <HAL_I2C_ER_IRQHandler+0xce>
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	2b28      	cmp	r3, #40	; 0x28
 8001de4:	d106      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b21      	cmp	r3, #33	; 0x21
 8001dea:	d103      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f001 f885 	bl	8002efc <I2C_Slave_AF>
 8001df2:	e016      	b.n	8001e22 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e06:	7efb      	ldrb	r3, [r7, #27]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d002      	beq.n	8001e12 <HAL_I2C_ER_IRQHandler+0xf4>
 8001e0c:	7efb      	ldrb	r3, [r7, #27]
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	0adb      	lsrs	r3, r3, #11
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00e      	beq.n	8001e4c <HAL_I2C_ER_IRQHandler+0x12e>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001e4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f001 f8c0 	bl	8002fe4 <I2C_ITError>
  }
}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d150      	bne.n	8002004 <I2C_MasterTransmit_TXE+0xc8>
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b21      	cmp	r3, #33	; 0x21
 8001f66:	d14d      	bne.n	8002004 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d01d      	beq.n	8001faa <I2C_MasterTransmit_TXE+0x6e>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d01a      	beq.n	8001faa <I2C_MasterTransmit_TXE+0x6e>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f7a:	d016      	beq.n	8001faa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2211      	movs	r2, #17
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff62 	bl	8001e6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fa8:	e060      	b.n	800206c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d107      	bne.n	8001ff4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff7d 	bl	8001eec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ff2:	e03b      	b.n	800206c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff35 	bl	8001e6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002002:	e033      	b.n	800206c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b21      	cmp	r3, #33	; 0x21
 8002008:	d005      	beq.n	8002016 <I2C_MasterTransmit_TXE+0xda>
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d12d      	bne.n	800206c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b22      	cmp	r3, #34	; 0x22
 8002014:	d12a      	bne.n	800206c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d108      	bne.n	8002032 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002030:	e01c      	b.n	800206c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d103      	bne.n	8002046 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f88e 	bl	8002160 <I2C_MemoryTransmit_TXE_BTF>
}
 8002044:	e012      	b.n	800206c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800206a:	e7ff      	b.n	800206c <I2C_MasterTransmit_TXE+0x130>
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b21      	cmp	r3, #33	; 0x21
 800208c:	d164      	bne.n	8002158 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80020bc:	e04c      	b.n	8002158 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d01d      	beq.n	8002100 <I2C_MasterTransmit_BTF+0x8c>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d01a      	beq.n	8002100 <I2C_MasterTransmit_BTF+0x8c>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020d0:	d016      	beq.n	8002100 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2211      	movs	r2, #17
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff feb7 	bl	8001e6c <HAL_I2C_MasterTxCpltCallback>
}
 80020fe:	e02b      	b.n	8002158 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800210e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d107      	bne.n	800214a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fed2 	bl	8001eec <HAL_I2C_MemTxCpltCallback>
}
 8002148:	e006      	b.n	8002158 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fe8a 	bl	8001e6c <HAL_I2C_MasterTxCpltCallback>
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002174:	2b00      	cmp	r3, #0
 8002176:	d11d      	bne.n	80021b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10b      	bne.n	8002198 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002184:	b2da      	uxtb	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002190:	1c9a      	adds	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002196:	e077      	b.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	b29b      	uxth	r3, r3
 800219e:	121b      	asrs	r3, r3, #8
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021b2:	e069      	b.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d10b      	bne.n	80021d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021d2:	e059      	b.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d152      	bne.n	8002282 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	2b22      	cmp	r3, #34	; 0x22
 80021e0:	d10d      	bne.n	80021fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021fc:	e044      	b.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b21      	cmp	r3, #33	; 0x21
 800220c:	d112      	bne.n	8002234 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002232:	e029      	b.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d124      	bne.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b21      	cmp	r3, #33	; 0x21
 8002242:	d121      	bne.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002252:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002262:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fe36 	bl	8001eec <HAL_I2C_MemTxCpltCallback>
}
 8002280:	e002      	b.n	8002288 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff f898 	bl	80013b8 <I2C_Flush_DR>
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b22      	cmp	r3, #34	; 0x22
 80022a2:	f040 80b9 	bne.w	8002418 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d921      	bls.n	80022fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	f040 8096 	bne.w	8002418 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80022fc:	e08c      	b.n	8002418 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	2b02      	cmp	r3, #2
 8002304:	d07f      	beq.n	8002406 <I2C_MasterReceive_RXNE+0x176>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d002      	beq.n	8002312 <I2C_MasterReceive_RXNE+0x82>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d179      	bne.n	8002406 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f001 fb68 	bl	80039e8 <I2C_WaitOnSTOPRequestThroughIT>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d14c      	bne.n	80023b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800233c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d10a      	bne.n	800238e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fdba 	bl	8001f00 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800238c:	e044      	b.n	8002418 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d002      	beq.n	80023a2 <I2C_MasterReceive_RXNE+0x112>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d103      	bne.n	80023aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
 80023a8:	e002      	b.n	80023b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2212      	movs	r2, #18
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fd65 	bl	8001e80 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023b6:	e02f      	b.n	8002418 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fd88 	bl	8001f14 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002404:	e008      	b.n	8002418 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	605a      	str	r2, [r3, #4]
}
 8002416:	e7ff      	b.n	8002418 <I2C_MasterReceive_RXNE+0x188>
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b04      	cmp	r3, #4
 8002436:	d11b      	bne.n	8002470 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800246e:	e0c8      	b.n	8002602 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b03      	cmp	r3, #3
 8002478:	d129      	bne.n	80024ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002488:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d00a      	beq.n	80024a6 <I2C_MasterReceive_BTF+0x86>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d007      	beq.n	80024a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024cc:	e099      	b.n	8002602 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	f040 8081 	bne.w	80025dc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d002      	beq.n	80024e6 <I2C_MasterReceive_BTF+0xc6>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d108      	bne.n	80024f8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e019      	b.n	800252c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d002      	beq.n	8002504 <I2C_MasterReceive_BTF+0xe4>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d108      	bne.n	8002516 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e00a      	b.n	800252c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b10      	cmp	r3, #16
 800251a:	d007      	beq.n	800252c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002586:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d10a      	bne.n	80025b2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fca8 	bl	8001f00 <HAL_I2C_MemRxCpltCallback>
}
 80025b0:	e027      	b.n	8002602 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d002      	beq.n	80025c6 <I2C_MasterReceive_BTF+0x1a6>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d103      	bne.n	80025ce <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
 80025cc:	e002      	b.n	80025d4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2212      	movs	r2, #18
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fc53 	bl	8001e80 <HAL_I2C_MasterRxCpltCallback>
}
 80025da:	e012      	b.n	8002602 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d117      	bne.n	800264e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002636:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002638:	e067      	b.n	800270a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]
}
 800264c:	e05d      	b.n	800270a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002656:	d133      	bne.n	80026c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b21      	cmp	r3, #33	; 0x21
 8002662:	d109      	bne.n	8002678 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	e008      	b.n	800268a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <I2C_Master_SB+0x92>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d108      	bne.n	80026ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d032      	beq.n	800270a <I2C_Master_SB+0x100>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d02d      	beq.n	800270a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026bc:	605a      	str	r2, [r3, #4]
}
 80026be:	e024      	b.n	800270a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10e      	bne.n	80026e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	11db      	asrs	r3, r3, #7
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 0306 	and.w	r3, r3, #6
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f063 030f 	orn	r3, r3, #15
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	611a      	str	r2, [r3, #16]
}
 80026e4:	e011      	b.n	800270a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10d      	bne.n	800270a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	11db      	asrs	r3, r3, #7
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f003 0306 	and.w	r3, r3, #6
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f063 030e 	orn	r3, r3, #14
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	611a      	str	r2, [r3, #16]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	b2da      	uxtb	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <I2C_Master_ADD10+0x26>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d108      	bne.n	800274e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <I2C_Master_ADD10+0x48>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275c:	605a      	str	r2, [r3, #4]
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800276a:	b480      	push	{r7}
 800276c:	b091      	sub	sp, #68	; 0x44
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002778:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b22      	cmp	r3, #34	; 0x22
 8002792:	f040 8169 	bne.w	8002a68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <I2C_Master_ADDR+0x54>
 800279e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d10b      	bne.n	80027be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a6:	2300      	movs	r3, #0
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	e160      	b.n	8002a80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11d      	bne.n	8002802 <I2C_Master_ADDR+0x98>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80027ce:	d118      	bne.n	8002802 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002800:	e13e      	b.n	8002a80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d113      	bne.n	8002834 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280c:	2300      	movs	r3, #0
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e115      	b.n	8002a60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	f040 808a 	bne.w	8002954 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002846:	d137      	bne.n	80028b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002856:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002866:	d113      	bne.n	8002890 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002876:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	e0e7      	b.n	8002a60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e0d3      	b.n	8002a60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d02e      	beq.n	800291c <I2C_Master_ADDR+0x1b2>
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d02b      	beq.n	800291c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80028c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c6:	2b12      	cmp	r3, #18
 80028c8:	d102      	bne.n	80028d0 <I2C_Master_ADDR+0x166>
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d125      	bne.n	800291c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d00e      	beq.n	80028f4 <I2C_Master_ADDR+0x18a>
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d00b      	beq.n	80028f4 <I2C_Master_ADDR+0x18a>
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d008      	beq.n	80028f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e007      	b.n	8002904 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002902:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	e0a1      	b.n	8002a60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e085      	b.n	8002a60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d14d      	bne.n	80029fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	2b04      	cmp	r3, #4
 8002962:	d016      	beq.n	8002992 <I2C_Master_ADDR+0x228>
 8002964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002966:	2b02      	cmp	r3, #2
 8002968:	d013      	beq.n	8002992 <I2C_Master_ADDR+0x228>
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	2b10      	cmp	r3, #16
 800296e:	d010      	beq.n	8002992 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e007      	b.n	80029a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b0:	d117      	bne.n	80029e2 <I2C_Master_ADDR+0x278>
 80029b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029b8:	d00b      	beq.n	80029d2 <I2C_Master_ADDR+0x268>
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d008      	beq.n	80029d2 <I2C_Master_ADDR+0x268>
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d005      	beq.n	80029d2 <I2C_Master_ADDR+0x268>
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d002      	beq.n	80029d2 <I2C_Master_ADDR+0x268>
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d107      	bne.n	80029e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	e032      	b.n	8002a60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a18:	d117      	bne.n	8002a4a <I2C_Master_ADDR+0x2e0>
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a20:	d00b      	beq.n	8002a3a <I2C_Master_ADDR+0x2d0>
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d008      	beq.n	8002a3a <I2C_Master_ADDR+0x2d0>
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d005      	beq.n	8002a3a <I2C_Master_ADDR+0x2d0>
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d002      	beq.n	8002a3a <I2C_Master_ADDR+0x2d0>
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d107      	bne.n	8002a4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002a66:	e00b      	b.n	8002a80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	e7ff      	b.n	8002a80 <I2C_Master_ADDR+0x316>
 8002a80:	bf00      	nop
 8002a82:	3744      	adds	r7, #68	; 0x44
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02b      	beq.n	8002afe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <I2C_SlaveTransmit_TXE+0x72>
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b29      	cmp	r3, #41	; 0x29
 8002ad8:	d111      	bne.n	8002afe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2221      	movs	r2, #33	; 0x21
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2228      	movs	r2, #40	; 0x28
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff f9cb 	bl	8001e94 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d011      	beq.n	8002b3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02c      	beq.n	8002bbc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d114      	bne.n	8002bbc <I2C_SlaveReceive_RXNE+0x74>
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b2a      	cmp	r3, #42	; 0x2a
 8002b96:	d111      	bne.n	8002bbc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2222      	movs	r2, #34	; 0x22
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2228      	movs	r2, #40	; 0x28
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff f976 	bl	8001ea8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c22:	2b28      	cmp	r3, #40	; 0x28
 8002c24:	d127      	bne.n	8002c76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	09db      	lsrs	r3, r3, #7
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	81bb      	strh	r3, [r7, #12]
 8002c58:	e002      	b.n	8002c60 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002c68:	89ba      	ldrh	r2, [r7, #12]
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff f924 	bl	8001ebc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c74:	e00e      	b.n	8002c94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002caa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf8:	d172      	bne.n	8002de0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b22      	cmp	r3, #34	; 0x22
 8002cfe:	d002      	beq.n	8002d06 <I2C_Slave_STOPF+0x6a>
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b2a      	cmp	r3, #42	; 0x2a
 8002d04:	d135      	bne.n	8002d72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe f863 	bl	8000e0a <HAL_DMA_GetState>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d049      	beq.n	8002dde <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	4a69      	ldr	r2, [pc, #420]	; (8002ef4 <I2C_Slave_STOPF+0x258>)
 8002d50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe f835 	bl	8000dc6 <HAL_DMA_Abort_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d03d      	beq.n	8002dde <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d70:	e035      	b.n	8002dde <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f043 0204 	orr.w	r2, r3, #4
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe f82d 	bl	8000e0a <HAL_DMA_GetState>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d014      	beq.n	8002de0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <I2C_Slave_STOPF+0x258>)
 8002dbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd ffff 	bl	8000dc6 <HAL_DMA_Abort_IT>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4798      	blx	r3
 8002ddc:	e000      	b.n	8002de0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dde:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d03e      	beq.n	8002e68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d112      	bne.n	8002e1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d112      	bne.n	8002e52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f043 0204 	orr.w	r2, r3, #4
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8b7 	bl	8002fe4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002e76:	e039      	b.n	8002eec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e7c:	d109      	bne.n	8002e92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2228      	movs	r2, #40	; 0x28
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff f80b 	bl	8001ea8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b28      	cmp	r3, #40	; 0x28
 8002e9c:	d111      	bne.n	8002ec2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <I2C_Slave_STOPF+0x25c>)
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff f80c 	bl	8001ed8 <HAL_I2C_ListenCpltCallback>
}
 8002ec0:	e014      	b.n	8002eec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	2b22      	cmp	r3, #34	; 0x22
 8002ec8:	d002      	beq.n	8002ed0 <I2C_Slave_STOPF+0x234>
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b22      	cmp	r3, #34	; 0x22
 8002ece:	d10d      	bne.n	8002eec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe ffde 	bl	8001ea8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	08003545 	.word	0x08003545
 8002ef8:	ffff0000 	.word	0xffff0000

08002efc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d002      	beq.n	8002f1e <I2C_Slave_AF+0x22>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d129      	bne.n	8002f72 <I2C_Slave_AF+0x76>
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b28      	cmp	r3, #40	; 0x28
 8002f22:	d126      	bne.n	8002f72 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a2e      	ldr	r2, [pc, #184]	; (8002fe0 <I2C_Slave_AF+0xe4>)
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f38:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f42:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f52:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe ffb4 	bl	8001ed8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002f70:	e031      	b.n	8002fd6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b21      	cmp	r3, #33	; 0x21
 8002f76:	d129      	bne.n	8002fcc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <I2C_Slave_AF+0xe4>)
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2221      	movs	r2, #33	; 0x21
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fa2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fbc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe f9fa 	bl	80013b8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe ff65 	bl	8001e94 <HAL_I2C_SlaveTxCpltCallback>
}
 8002fca:	e004      	b.n	8002fd6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd4:	615a      	str	r2, [r3, #20]
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	ffff0000 	.word	0xffff0000

08002fe4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ffc:	7bbb      	ldrb	r3, [r7, #14]
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	d002      	beq.n	8003008 <I2C_ITError+0x24>
 8003002:	7bbb      	ldrb	r3, [r7, #14]
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d10a      	bne.n	800301e <I2C_ITError+0x3a>
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b22      	cmp	r3, #34	; 0x22
 800300c:	d107      	bne.n	800301e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003024:	2b28      	cmp	r3, #40	; 0x28
 8003026:	d107      	bne.n	8003038 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2228      	movs	r2, #40	; 0x28
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003036:	e015      	b.n	8003064 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003046:	d00a      	beq.n	800305e <I2C_ITError+0x7a>
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b60      	cmp	r3, #96	; 0x60
 800304c:	d007      	beq.n	800305e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003072:	d162      	bne.n	800313a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003082:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d020      	beq.n	80030d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	4a6a      	ldr	r2, [pc, #424]	; (8003240 <I2C_ITError+0x25c>)
 8003098:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fe91 	bl	8000dc6 <HAL_DMA_Abort_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8089 	beq.w	80031be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030ce:	4610      	mov	r0, r2
 80030d0:	4798      	blx	r3
 80030d2:	e074      	b.n	80031be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	4a59      	ldr	r2, [pc, #356]	; (8003240 <I2C_ITError+0x25c>)
 80030da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fe70 	bl	8000dc6 <HAL_DMA_Abort_IT>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d068      	beq.n	80031be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d10b      	bne.n	8003112 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003134:	4610      	mov	r0, r2
 8003136:	4798      	blx	r3
 8003138:	e041      	b.n	80031be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b60      	cmp	r3, #96	; 0x60
 8003144:	d125      	bne.n	8003192 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d10b      	bne.n	800317a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fecc 	bl	8001f28 <HAL_I2C_AbortCpltCallback>
 8003190:	e015      	b.n	80031be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d10b      	bne.n	80031b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fe feab 	bl	8001f14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10e      	bne.n	80031ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d113      	bne.n	8003238 <I2C_ITError+0x254>
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b28      	cmp	r3, #40	; 0x28
 8003214:	d110      	bne.n	8003238 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <I2C_ITError+0x260>)
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fe50 	bl	8001ed8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	08003545 	.word	0x08003545
 8003244:	ffff0000 	.word	0xffff0000

08003248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	460b      	mov	r3, r1
 800325c:	813b      	strh	r3, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	2200      	movs	r2, #0
 800327a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa08 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003298:	d103      	bne.n	80032a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e05f      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	492d      	ldr	r1, [pc, #180]	; (8003370 <I2C_RequestMemoryWrite+0x128>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fa63 	bl	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e04c      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6a39      	ldr	r1, [r7, #32]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 faee 	bl	80038c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d107      	bne.n	800330a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e02b      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003314:	893b      	ldrh	r3, [r7, #8]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	e021      	b.n	8003364 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	b29b      	uxth	r3, r3
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fac8 	bl	80038c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b04      	cmp	r3, #4
 8003344:	d107      	bne.n	8003356 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e005      	b.n	8003366 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800335a:	893b      	ldrh	r3, [r7, #8]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	00010002 	.word	0x00010002

08003374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f96a 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d4:	d103      	bne.n	80033de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0aa      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	4952      	ldr	r1, [pc, #328]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f9c5 	bl	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e097      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa50 	bl	80038c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e076      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	e021      	b.n	80034a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b29b      	uxth	r3, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa2a 	bl	80038c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e050      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003496:	893b      	ldrh	r3, [r7, #8]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fa0f 	bl	80038c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d107      	bne.n	80034c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e035      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f8d3 	bl	8003694 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d103      	bne.n	800350c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	6a3a      	ldr	r2, [r7, #32]
 8003524:	4906      	ldr	r1, [pc, #24]	; (8003540 <I2C_RequestMemoryRead+0x1cc>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f92e 	bl	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	00010002 	.word	0x00010002

08003544 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800355e:	4b4b      	ldr	r3, [pc, #300]	; (800368c <I2C_DMAAbort+0x148>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	4a4a      	ldr	r2, [pc, #296]	; (8003690 <I2C_DMAAbort+0x14c>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0a1a      	lsrs	r2, r3, #8
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00da      	lsls	r2, r3, #3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800358a:	e00a      	b.n	80035a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d0ea      	beq.n	8003578 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ae:	2200      	movs	r2, #0
 80035b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	2200      	movs	r2, #0
 80035c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	2200      	movs	r2, #0
 80035e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	2200      	movs	r2, #0
 80035f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b60      	cmp	r3, #96	; 0x60
 8003612:	d10e      	bne.n	8003632 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7fe fc7c 	bl	8001f28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003630:	e027      	b.n	8003682 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003638:	2b28      	cmp	r3, #40	; 0x28
 800363a:	d117      	bne.n	800366c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800365a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2228      	movs	r2, #40	; 0x28
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800366a:	e007      	b.n	800367c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800367c:	6978      	ldr	r0, [r7, #20]
 800367e:	f7fe fc49 	bl	8001f14 <HAL_I2C_ErrorCallback>
}
 8003682:	bf00      	nop
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000
 8003690:	14f8b589 	.word	0x14f8b589

08003694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a4:	e048      	b.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d044      	beq.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7fd fa49 	bl	8000b44 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d139      	bne.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10d      	bne.n	80036ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	e00c      	b.n	8003704 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	429a      	cmp	r2, r3
 8003708:	d116      	bne.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e023      	b.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10d      	bne.n	800375e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	43da      	mvns	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4013      	ands	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	e00c      	b.n	8003778 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	429a      	cmp	r2, r3
 800377c:	d093      	beq.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003796:	e071      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d123      	bne.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e067      	b.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d041      	beq.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	f7fd f9a4 	bl	8000b44 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d136      	bne.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10c      	bne.n	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e00b      	b.n	800384a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	43da      	mvns	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4013      	ands	r3, r2
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e021      	b.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10c      	bne.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	43da      	mvns	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e00b      	b.n	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f47f af6d 	bne.w	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d4:	e034      	b.n	8003940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f915 	bl	8003b06 <I2C_IsAcknowledgeFailed>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e034      	b.n	8003950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d028      	beq.n	8003940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7fd f929 	bl	8000b44 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11d      	bne.n	8003940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d016      	beq.n	8003940 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e007      	b.n	8003950 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d1c3      	bne.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003964:	e034      	b.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f8cd 	bl	8003b06 <I2C_IsAcknowledgeFailed>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e034      	b.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d028      	beq.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fd f8e1 	bl	8000b44 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11d      	bne.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d016      	beq.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e007      	b.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d1c3      	bne.n	8003966 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	08db      	lsrs	r3, r3, #3
 80039fa:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	0a1a      	lsrs	r2, r3, #8
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d107      	bne.n	8003a26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e008      	b.n	8003a38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a34:	d0e9      	beq.n	8003a0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	20000000 	.word	0x20000000
 8003a48:	14f8b589 	.word	0x14f8b589

08003a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a58:	e049      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d119      	bne.n	8003a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0210 	mvn.w	r2, #16
 8003a70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e030      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	f7fd f852 	bl	8000b44 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11d      	bne.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d016      	beq.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d1ae      	bne.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d11b      	bne.n	8003b56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0204 	orr.w	r2, r3, #4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b74:	d103      	bne.n	8003b7e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b7c:	e007      	b.n	8003b8e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b86:	d102      	bne.n	8003b8e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af02      	add	r7, sp, #8
 8003ba0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e101      	b.n	8003db0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f005 fd92 	bl	80096f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2203      	movs	r2, #3
 8003bd0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bda:	d102      	bne.n	8003be2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f002 f977 	bl	8005eda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	7c1a      	ldrb	r2, [r3, #16]
 8003bf4:	f88d 2000 	strb.w	r2, [sp]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bfc:	f002 f856 	bl	8005cac <USB_CoreInit>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0ce      	b.n	8003db0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f002 f96f 	bl	8005efc <USB_SetCurrentMode>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0bf      	b.n	8003db0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e04a      	b.n	8003ccc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3315      	adds	r3, #21
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3314      	adds	r3, #20
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	b298      	uxth	r0, r3
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	332e      	adds	r3, #46	; 0x2e
 8003c72:	4602      	mov	r2, r0
 8003c74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3318      	adds	r3, #24
 8003c86:	2200      	movs	r2, #0
 8003c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	331c      	adds	r3, #28
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3320      	adds	r3, #32
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	791b      	ldrb	r3, [r3, #4]
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d3af      	bcc.n	8003c36 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
 8003cda:	e044      	b.n	8003d66 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003d04:	7bfa      	ldrb	r2, [r7, #15]
 8003d06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d08:	7bfa      	ldrb	r2, [r7, #15]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d34:	7bfa      	ldrb	r2, [r7, #15]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	3301      	adds	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	791b      	ldrb	r3, [r3, #4]
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3b5      	bcc.n	8003cdc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7c1a      	ldrb	r2, [r3, #16]
 8003d78:	f88d 2000 	strb.w	r2, [sp]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d80:	f002 f908 	bl	8005f94 <USB_DevInit>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00c      	b.n	8003db0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 f94c 	bl	8007046 <USB_DevDisconnect>

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_PCD_Start+0x1c>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e022      	b.n	8003e1a <HAL_PCD_Start+0x62>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f002 f859 	bl	8005eb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 f8fa 	bl	8007004 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e22:	b590      	push	{r4, r7, lr}
 8003e24:	b08d      	sub	sp, #52	; 0x34
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f003 f9b8 	bl	80071ae <USB_GetMode>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 848c 	bne.w	800475e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f003 f91c 	bl	8007088 <USB_ReadInterrupts>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8482 	beq.w	800475c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 f909 	bl	8007088 <USB_ReadInterrupts>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d107      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f002 0202 	and.w	r2, r2, #2
 8003e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f003 f8f7 	bl	8007088 <USB_ReadInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d161      	bne.n	8003f68 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0210 	bic.w	r2, r2, #16
 8003eb2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4413      	add	r3, r2
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	0c5b      	lsrs	r3, r3, #17
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d124      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d035      	beq.n	8003f58 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	6a38      	ldr	r0, [r7, #32]
 8003f00:	f002 ff2e 	bl	8006d60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f10:	441a      	add	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f22:	441a      	add	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	615a      	str	r2, [r3, #20]
 8003f28:	e016      	b.n	8003f58 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	0c5b      	lsrs	r3, r3, #17
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d110      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6a38      	ldr	r0, [r7, #32]
 8003f42:	f002 ff0d 	bl	8006d60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f52:	441a      	add	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0210 	orr.w	r2, r2, #16
 8003f66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 f88b 	bl	8007088 <USB_ReadInterrupts>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f7c:	f040 80a7 	bne.w	80040ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f003 f890 	bl	80070ae <USB_ReadDevAllOutEpInterrupt>
 8003f8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003f90:	e099      	b.n	80040c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 808e 	beq.w	80040ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f003 f8b4 	bl	8007116 <USB_ReadDevOutEPInterrupt>
 8003fae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2301      	movs	r3, #1
 8003fca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fea2 	bl	8004d18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	461a      	mov	r2, r3
 8003fec:	2308      	movs	r3, #8
 8003fee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 ff78 	bl	8004ee8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	461a      	mov	r2, r3
 8004010:	2310      	movs	r3, #16
 8004012:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d030      	beq.n	8004080 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d109      	bne.n	800403e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800403c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800403e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	78db      	ldrb	r3, [r3, #3]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d108      	bne.n	800406e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2200      	movs	r2, #0
 8004060:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	b2db      	uxtb	r3, r3
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f005 fc3d 	bl	80098e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	2302      	movs	r3, #2
 800407e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	461a      	mov	r2, r3
 8004098:	2320      	movs	r3, #32
 800409a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	3301      	adds	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f47f af62 	bne.w	8003f92 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f002 ffd8 	bl	8007088 <USB_ReadInterrupts>
 80040d8:	4603      	mov	r3, r0
 80040da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e2:	f040 80db 	bne.w	800429c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 fff9 	bl	80070e2 <USB_ReadDevAllInEpInterrupt>
 80040f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80040f6:	e0cd      	b.n	8004294 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80c2 	beq.w	8004288 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f003 f81f 	bl	8007152 <USB_ReadDevInEPInterrupt>
 8004114:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d057      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	2201      	movs	r2, #1
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	69f9      	ldr	r1, [r7, #28]
 800413c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004140:	4013      	ands	r3, r2
 8004142:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	461a      	mov	r2, r3
 8004152:	2301      	movs	r3, #1
 8004154:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	799b      	ldrb	r3, [r3, #6]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d132      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	3320      	adds	r3, #32
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4403      	add	r3, r0
 800417e:	331c      	adds	r3, #28
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4419      	add	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4403      	add	r3, r0
 8004192:	3320      	adds	r3, #32
 8004194:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x3a2>
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	3324      	adds	r3, #36	; 0x24
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80041bc:	461a      	mov	r2, r3
 80041be:	2101      	movs	r1, #1
 80041c0:	f003 f826 	bl	8007210 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f005 fb11 	bl	80097f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	461a      	mov	r2, r3
 80041e8:	2308      	movs	r3, #8
 80041ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004202:	461a      	mov	r2, r3
 8004204:	2310      	movs	r3, #16
 8004206:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	461a      	mov	r2, r3
 8004220:	2340      	movs	r3, #64	; 0x40
 8004222:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d023      	beq.n	8004276 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800422e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004230:	6a38      	ldr	r0, [r7, #32]
 8004232:	f002 f813 	bl	800625c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	3310      	adds	r3, #16
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	3304      	adds	r3, #4
 8004248:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d108      	bne.n	8004264 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	b2db      	uxtb	r3, r3
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f005 fb54 	bl	800990c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	461a      	mov	r2, r3
 8004272:	2302      	movs	r3, #2
 8004274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fcbb 	bl	8004bfe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	3301      	adds	r3, #1
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	085b      	lsrs	r3, r3, #1
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	f47f af2e 	bne.w	80040f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f002 fef1 	bl	8007088 <USB_ReadInterrupts>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b0:	d122      	bne.n	80042f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d108      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042d8:	2100      	movs	r1, #0
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fea2 	bl	8005024 <HAL_PCDEx_LPM_Callback>
 80042e0:	e002      	b.n	80042e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f005 faf2 	bl	80098cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f002 fec3 	bl	8007088 <USB_ReadInterrupts>
 8004302:	4603      	mov	r3, r0
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430c:	d112      	bne.n	8004334 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f005 faae 	bl	8009880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004332:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f002 fea5 	bl	8007088 <USB_ReadInterrupts>
 800433e:	4603      	mov	r3, r0
 8004340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004348:	f040 80b7 	bne.w	80044ba <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2110      	movs	r1, #16
 8004366:	4618      	mov	r0, r3
 8004368:	f001 ff78 	bl	800625c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004370:	e046      	b.n	8004400 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437e:	461a      	mov	r2, r3
 8004380:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004384:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ca:	0151      	lsls	r1, r2, #5
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	440a      	add	r2, r1
 80043d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	3301      	adds	r3, #1
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	791b      	ldrb	r3, [r3, #4]
 8004404:	461a      	mov	r2, r3
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	4293      	cmp	r3, r2
 800440a:	d3b2      	bcc.n	8004372 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800441e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7bdb      	ldrb	r3, [r3, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d016      	beq.n	8004456 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004438:	f043 030b 	orr.w	r3, r3, #11
 800443c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800444e:	f043 030b 	orr.w	r3, r3, #11
 8004452:	6453      	str	r3, [r2, #68]	; 0x44
 8004454:	e015      	b.n	8004482 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004464:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004468:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800446c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447c:	f043 030b 	orr.w	r3, r3, #11
 8004480:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004490:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004494:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044a4:	461a      	mov	r2, r3
 80044a6:	f002 feb3 	bl	8007210 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80044b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 fde2 	bl	8007088 <USB_ReadInterrupts>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ce:	d123      	bne.n	8004518 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f002 fe78 	bl	80071ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 ff35 	bl	800634e <USB_GetDevSpeed>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681c      	ldr	r4, [r3, #0]
 80044f0:	f001 f9c8 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 80044f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044fa:	461a      	mov	r2, r3
 80044fc:	4620      	mov	r0, r4
 80044fe:	f001 fc39 	bl	8005d74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f005 f99d 	bl	8009842 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004516:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f002 fdb3 	bl	8007088 <USB_ReadInterrupts>
 8004522:	4603      	mov	r3, r0
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d10a      	bne.n	8004542 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f005 f97a 	bl	8009826 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f002 0208 	and.w	r2, r2, #8
 8004540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f002 fd9e 	bl	8007088 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b80      	cmp	r3, #128	; 0x80
 8004554:	d123      	bne.n	800459e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004562:	2301      	movs	r3, #1
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	e014      	b.n	8004592 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	f203 2357 	addw	r3, r3, #599	; 0x257
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d105      	bne.n	800458c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	b2db      	uxtb	r3, r3
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fb08 	bl	8004b9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	3301      	adds	r3, #1
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	791b      	ldrb	r3, [r3, #4]
 8004596:	461a      	mov	r2, r3
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	4293      	cmp	r3, r2
 800459c:	d3e4      	bcc.n	8004568 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f002 fd70 	bl	8007088 <USB_ReadInterrupts>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b2:	d13c      	bne.n	800462e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	e02b      	b.n	8004612 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3318      	adds	r3, #24
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d115      	bne.n	800460c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da12      	bge.n	800460c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	3317      	adds	r3, #23
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004602:	b2db      	uxtb	r3, r3
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fac8 	bl	8004b9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	3301      	adds	r3, #1
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	791b      	ldrb	r3, [r3, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	4293      	cmp	r3, r2
 800461c:	d3cd      	bcc.n	80045ba <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800462c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f002 fd28 	bl	8007088 <USB_ReadInterrupts>
 8004638:	4603      	mov	r3, r0
 800463a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004642:	d156      	bne.n	80046f2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004644:	2301      	movs	r3, #1
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
 8004648:	e045      	b.n	80046d6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d12e      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004672:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004674:	2b00      	cmp	r3, #0
 8004676:	da2b      	bge.n	80046d0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004684:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004688:	429a      	cmp	r2, r3
 800468a:	d121      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046cc:	6053      	str	r3, [r2, #4]
            break;
 80046ce:	e008      	b.n	80046e2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	3301      	adds	r3, #1
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	791b      	ldrb	r3, [r3, #4]
 80046da:	461a      	mov	r2, r3
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	4293      	cmp	r3, r2
 80046e0:	d3b3      	bcc.n	800464a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80046f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f002 fcc6 	bl	8007088 <USB_ReadInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004706:	d10a      	bne.n	800471e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f005 f911 	bl	8009930 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800471c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f002 fcb0 	bl	8007088 <USB_ReadInterrupts>
 8004728:	4603      	mov	r3, r0
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d115      	bne.n	800475e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f005 f901 	bl	800994c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e000      	b.n	800475e <HAL_PCD_IRQHandler+0x93c>
      return;
 800475c:	bf00      	nop
    }
  }
}
 800475e:	3734      	adds	r7, #52	; 0x34
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}

08004764 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_PCD_SetAddress+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e012      	b.n	80047a4 <HAL_PCD_SetAddress+0x40>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f002 fc0f 	bl	8006fb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	70fb      	strb	r3, [r7, #3]
 80047be:	460b      	mov	r3, r1
 80047c0:	803b      	strh	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da0f      	bge.n	80047f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	3310      	adds	r3, #16
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	3304      	adds	r3, #4
 80047e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	705a      	strb	r2, [r3, #1]
 80047f0:	e00f      	b.n	8004812 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800481e:	883a      	ldrh	r2, [r7, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	78ba      	ldrb	r2, [r7, #2]
 8004828:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800483c:	78bb      	ldrb	r3, [r7, #2]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d102      	bne.n	8004848 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_PCD_EP_Open+0xaa>
 8004852:	2302      	movs	r3, #2
 8004854:	e00e      	b.n	8004874 <HAL_PCD_EP_Open+0xc8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	4618      	mov	r0, r3
 8004866:	f001 fd97 	bl	8006398 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004872:	7afb      	ldrb	r3, [r7, #11]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800488c:	2b00      	cmp	r3, #0
 800488e:	da0f      	bge.n	80048b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	3310      	adds	r3, #16
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	3304      	adds	r3, #4
 80048a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	705a      	strb	r2, [r3, #1]
 80048ae:	e00f      	b.n	80048d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_PCD_EP_Close+0x6e>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e00e      	b.n	8004908 <HAL_PCD_EP_Close+0x8c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68f9      	ldr	r1, [r7, #12]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fdd5 	bl	80064a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	460b      	mov	r3, r1
 800491e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004920:	7afb      	ldrb	r3, [r7, #11]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004952:	7afb      	ldrb	r3, [r7, #11]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	b2da      	uxtb	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	799b      	ldrb	r3, [r3, #6]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	799b      	ldrb	r3, [r3, #6]
 8004974:	461a      	mov	r2, r3
 8004976:	6979      	ldr	r1, [r7, #20]
 8004978:	f001 fe72 	bl	8006660 <USB_EPStartXfer>

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	f003 020f 	and.w	r2, r3, #15
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80049a8:	681b      	ldr	r3, [r3, #0]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	460b      	mov	r3, r1
 80049c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	3310      	adds	r3, #16
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	3304      	adds	r3, #4
 80049dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2201      	movs	r2, #1
 80049f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	799b      	ldrb	r3, [r3, #6]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d102      	bne.n	8004a10 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	799b      	ldrb	r3, [r3, #6]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6979      	ldr	r1, [r7, #20]
 8004a1c:	f001 fe20 	bl	8006660 <USB_EPStartXfer>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	7912      	ldrb	r2, [r2, #4]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e04f      	b.n	8004ae8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	da0f      	bge.n	8004a70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	f003 020f 	and.w	r2, r3, #15
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	3310      	adds	r3, #16
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4413      	add	r3, r2
 8004a64:	3304      	adds	r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	705a      	strb	r2, [r3, #1]
 8004a6e:	e00d      	b.n	8004a8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	3304      	adds	r3, #4
 8004a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_PCD_EP_SetStall+0x82>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e01d      	b.n	8004ae8 <HAL_PCD_EP_SetStall+0xbe>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 f9a8 	bl	8006e10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	7999      	ldrb	r1, [r3, #6]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f002 fb99 	bl	8007210 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	7912      	ldrb	r2, [r2, #4]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e042      	b.n	8004b94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da0f      	bge.n	8004b36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 020f 	and.w	r2, r3, #15
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3310      	adds	r3, #16
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	705a      	strb	r2, [r3, #1]
 8004b34:	e00f      	b.n	8004b56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	f003 020f 	and.w	r2, r3, #15
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_PCD_EP_ClrStall+0x86>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e00e      	b.n	8004b94 <HAL_PCD_EP_ClrStall+0xa4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 f9b1 	bl	8006eec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da0c      	bge.n	8004bca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	f003 020f 	and.w	r2, r3, #15
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	3310      	adds	r3, #16
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e00c      	b.n	8004be4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4413      	add	r3, r2
 8004be0:	3304      	adds	r3, #4
 8004be2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 ffd0 	bl	8006b90 <USB_EPStopXfer>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bf4:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b08a      	sub	sp, #40	; 0x28
 8004c02:	af02      	add	r7, sp, #8
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4413      	add	r3, r2
 8004c22:	3304      	adds	r3, #4
 8004c24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d901      	bls.n	8004c36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06b      	b.n	8004d0e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d902      	bls.n	8004c52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3303      	adds	r3, #3
 8004c56:	089b      	lsrs	r3, r3, #2
 8004c58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c5a:	e02a      	b.n	8004cb2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d902      	bls.n	8004c78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3303      	adds	r3, #3
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	68d9      	ldr	r1, [r3, #12]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	4603      	mov	r3, r0
 8004c94:	6978      	ldr	r0, [r7, #20]
 8004c96:	f002 f825 	bl	8006ce4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	441a      	add	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d809      	bhi.n	8004cdc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d203      	bcs.n	8004cdc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1bf      	bne.n	8004c5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d811      	bhi.n	8004d0c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	2201      	movs	r2, #1
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	6939      	ldr	r1, [r7, #16]
 8004d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d08:	4013      	ands	r3, r2
 8004d0a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	333c      	adds	r3, #60	; 0x3c
 8004d30:	3304      	adds	r3, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	799b      	ldrb	r3, [r3, #6]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d17b      	bne.n	8004e46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d015      	beq.n	8004d84 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4a61      	ldr	r2, [pc, #388]	; (8004ee0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	f240 80b9 	bls.w	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80b3 	beq.w	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d80:	6093      	str	r3, [r2, #8]
 8004d82:	e0a7      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	6093      	str	r3, [r2, #8]
 8004da0:	e098      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f040 8093 	bne.w	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	4a4b      	ldr	r2, [pc, #300]	; (8004ee0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d90f      	bls.n	8004dd6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd2:	6093      	str	r3, [r2, #8]
 8004dd4:	e07e      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	4413      	add	r3, r2
 8004de8:	3304      	adds	r3, #4
 8004dea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	440b      	add	r3, r1
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d114      	bne.n	8004e38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004e20:	461a      	mov	r2, r3
 8004e22:	2101      	movs	r1, #1
 8004e24:	f002 f9f4 	bl	8007210 <USB_EP0_OutStart>
 8004e28:	e006      	b.n	8004e38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	441a      	add	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f004 fcbc 	bl	80097bc <HAL_PCD_DataOutStageCallback>
 8004e44:	e046      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4a26      	ldr	r2, [pc, #152]	; (8004ee4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d124      	bne.n	8004e98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	461a      	mov	r2, r3
 8004e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6a:	6093      	str	r3, [r2, #8]
 8004e6c:	e032      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	461a      	mov	r2, r3
 8004e86:	2320      	movs	r3, #32
 8004e88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f004 fc93 	bl	80097bc <HAL_PCD_DataOutStageCallback>
 8004e96:	e01d      	b.n	8004ed4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d114      	bne.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d108      	bne.n	8004ec8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	f002 f9a4 	bl	8007210 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f004 fc74 	bl	80097bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	4f54300a 	.word	0x4f54300a
 8004ee4:	4f54310a 	.word	0x4f54310a

08004ee8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	333c      	adds	r3, #60	; 0x3c
 8004f00:	3304      	adds	r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d90e      	bls.n	8004f3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f004 fc2b 	bl	8009798 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d90c      	bls.n	8004f64 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	799b      	ldrb	r3, [r3, #6]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d108      	bne.n	8004f64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2101      	movs	r1, #1
 8004f60:	f002 f956 	bl	8007210 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	4f54300a 	.word	0x4f54300a

08004f74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
 8004f80:	4613      	mov	r3, r2
 8004f82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f92:	883b      	ldrh	r3, [r7, #0]
 8004f94:	0419      	lsls	r1, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa0:	e028      	b.n	8004ff4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	e00d      	b.n	8004fd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	3340      	adds	r3, #64	; 0x40
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4413      	add	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3ec      	bcc.n	8004fb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	0418      	lsls	r0, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	4302      	orrs	r2, r0
 8004fec:	3340      	adds	r3, #64	; 0x40
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e267      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d075      	beq.n	8005146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800505a:	4b88      	ldr	r3, [pc, #544]	; (800527c <HAL_RCC_OscConfig+0x240>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b04      	cmp	r3, #4
 8005064:	d00c      	beq.n	8005080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005066:	4b85      	ldr	r3, [pc, #532]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506e:	2b08      	cmp	r3, #8
 8005070:	d112      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005072:	4b82      	ldr	r3, [pc, #520]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507e:	d10b      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	4b7e      	ldr	r3, [pc, #504]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d05b      	beq.n	8005144 <HAL_RCC_OscConfig+0x108>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d157      	bne.n	8005144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e242      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCC_OscConfig+0x74>
 80050a2:	4b76      	ldr	r3, [pc, #472]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a75      	ldr	r2, [pc, #468]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e01d      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x98>
 80050ba:	4b70      	ldr	r3, [pc, #448]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a6f      	ldr	r2, [pc, #444]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b6d      	ldr	r3, [pc, #436]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a6c      	ldr	r2, [pc, #432]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e00b      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050d4:	4b69      	ldr	r3, [pc, #420]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a68      	ldr	r2, [pc, #416]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b66      	ldr	r3, [pc, #408]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a65      	ldr	r2, [pc, #404]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80050e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d013      	beq.n	800511c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fb fd26 	bl	8000b44 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fb fd22 	bl	8000b44 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	; 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e207      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	4b5b      	ldr	r3, [pc, #364]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0xc0>
 800511a:	e014      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fb fd12 	bl	8000b44 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005124:	f7fb fd0e 	bl	8000b44 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	; 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e1f3      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	4b51      	ldr	r3, [pc, #324]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0xe8>
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d063      	beq.n	800521a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005152:	4b4a      	ldr	r3, [pc, #296]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515e:	4b47      	ldr	r3, [pc, #284]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516a:	4b44      	ldr	r3, [pc, #272]	; (800527c <HAL_RCC_OscConfig+0x240>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d116      	bne.n	80051a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_RCC_OscConfig+0x152>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e1c7      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518e:	4b3b      	ldr	r3, [pc, #236]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4937      	ldr	r1, [pc, #220]	; (800527c <HAL_RCC_OscConfig+0x240>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a2:	e03a      	b.n	800521a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ac:	4b34      	ldr	r3, [pc, #208]	; (8005280 <HAL_RCC_OscConfig+0x244>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fb fcc7 	bl	8000b44 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fb fcc3 	bl	8000b44 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e1a8      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	4b2b      	ldr	r3, [pc, #172]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d8:	4b28      	ldr	r3, [pc, #160]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4925      	ldr	r1, [pc, #148]	; (800527c <HAL_RCC_OscConfig+0x240>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]
 80051ec:	e015      	b.n	800521a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ee:	4b24      	ldr	r3, [pc, #144]	; (8005280 <HAL_RCC_OscConfig+0x244>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fb fca6 	bl	8000b44 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fb fca2 	bl	8000b44 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e187      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d036      	beq.n	8005294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_RCC_OscConfig+0x248>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fb fc86 	bl	8000b44 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523c:	f7fb fc82 	bl	8000b44 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e167      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_OscConfig+0x240>)
 8005250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f0      	beq.n	800523c <HAL_RCC_OscConfig+0x200>
 800525a:	e01b      	b.n	8005294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <HAL_RCC_OscConfig+0x248>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005262:	f7fb fc6f 	bl	8000b44 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	e00e      	b.n	8005288 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800526a:	f7fb fc6b 	bl	8000b44 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d907      	bls.n	8005288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e150      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
 800527c:	40023800 	.word	0x40023800
 8005280:	42470000 	.word	0x42470000
 8005284:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005288:	4b88      	ldr	r3, [pc, #544]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 800528a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ea      	bne.n	800526a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8097 	beq.w	80053d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a6:	4b81      	ldr	r3, [pc, #516]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	4b7d      	ldr	r3, [pc, #500]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	4a7c      	ldr	r2, [pc, #496]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6413      	str	r3, [r2, #64]	; 0x40
 80052c2:	4b7a      	ldr	r3, [pc, #488]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b77      	ldr	r3, [pc, #476]	; (80054b0 <HAL_RCC_OscConfig+0x474>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b74      	ldr	r3, [pc, #464]	; (80054b0 <HAL_RCC_OscConfig+0x474>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a73      	ldr	r2, [pc, #460]	; (80054b0 <HAL_RCC_OscConfig+0x474>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fb fc2b 	bl	8000b44 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fb fc27 	bl	8000b44 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e10c      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b6a      	ldr	r3, [pc, #424]	; (80054b0 <HAL_RCC_OscConfig+0x474>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x2ea>
 8005318:	4b64      	ldr	r3, [pc, #400]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531c:	4a63      	ldr	r2, [pc, #396]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	; 0x70
 8005324:	e01c      	b.n	8005360 <HAL_RCC_OscConfig+0x324>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b05      	cmp	r3, #5
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x30c>
 800532e:	4b5f      	ldr	r3, [pc, #380]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	4a5e      	ldr	r2, [pc, #376]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	6713      	str	r3, [r2, #112]	; 0x70
 800533a:	4b5c      	ldr	r3, [pc, #368]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	4a5b      	ldr	r2, [pc, #364]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6713      	str	r3, [r2, #112]	; 0x70
 8005346:	e00b      	b.n	8005360 <HAL_RCC_OscConfig+0x324>
 8005348:	4b58      	ldr	r3, [pc, #352]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4a57      	ldr	r2, [pc, #348]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	6713      	str	r3, [r2, #112]	; 0x70
 8005354:	4b55      	ldr	r3, [pc, #340]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4a54      	ldr	r2, [pc, #336]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 800535a:	f023 0304 	bic.w	r3, r3, #4
 800535e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d015      	beq.n	8005394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fb fbec 	bl	8000b44 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fb fbe8 	bl	8000b44 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	; 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0cb      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005386:	4b49      	ldr	r3, [pc, #292]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ee      	beq.n	8005370 <HAL_RCC_OscConfig+0x334>
 8005392:	e014      	b.n	80053be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005394:	f7fb fbd6 	bl	8000b44 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fb fbd2 	bl	8000b44 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0b5      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b2:	4b3e      	ldr	r3, [pc, #248]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1ee      	bne.n	800539c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053be:	7dfb      	ldrb	r3, [r7, #23]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d105      	bne.n	80053d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c4:	4b39      	ldr	r3, [pc, #228]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	4a38      	ldr	r2, [pc, #224]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80053ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a1 	beq.w	800551c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053da:	4b34      	ldr	r3, [pc, #208]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d05c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d141      	bne.n	8005472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ee:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <HAL_RCC_OscConfig+0x478>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f4:	f7fb fba6 	bl	8000b44 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053fc:	f7fb fba2 	bl	8000b44 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e087      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69da      	ldr	r2, [r3, #28]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	019b      	lsls	r3, r3, #6
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	3b01      	subs	r3, #1
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	491b      	ldr	r1, [pc, #108]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005444:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <HAL_RCC_OscConfig+0x478>)
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fb fb7b 	bl	8000b44 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005452:	f7fb fb77 	bl	8000b44 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e05c      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005464:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x416>
 8005470:	e054      	b.n	800551c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <HAL_RCC_OscConfig+0x478>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fb fb64 	bl	8000b44 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005480:	f7fb fb60 	bl	8000b44 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e045      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCC_OscConfig+0x470>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x444>
 800549e:	e03d      	b.n	800551c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e038      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
 80054ac:	40023800 	.word	0x40023800
 80054b0:	40007000 	.word	0x40007000
 80054b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCC_OscConfig+0x4ec>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d028      	beq.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d121      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d11a      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054e8:	4013      	ands	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d111      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	3b01      	subs	r3, #1
 8005502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005504:	429a      	cmp	r2, r3
 8005506:	d107      	bne.n	8005518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800

0800552c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0cc      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005540:	4b68      	ldr	r3, [pc, #416]	; (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d90c      	bls.n	8005568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554e:	4b65      	ldr	r3, [pc, #404]	; (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005556:	4b63      	ldr	r3, [pc, #396]	; (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d001      	beq.n	8005568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e0b8      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d020      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005580:	4b59      	ldr	r3, [pc, #356]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4a58      	ldr	r2, [pc, #352]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800558a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005598:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a52      	ldr	r2, [pc, #328]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a4:	4b50      	ldr	r3, [pc, #320]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	494d      	ldr	r1, [pc, #308]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d044      	beq.n	800564c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	4b47      	ldr	r3, [pc, #284]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d119      	bne.n	800560a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e07f      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ea:	4b3f      	ldr	r3, [pc, #252]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e06f      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fa:	4b3b      	ldr	r3, [pc, #236]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e067      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800560a:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f023 0203 	bic.w	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4934      	ldr	r1, [pc, #208]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	4313      	orrs	r3, r2
 800561a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800561c:	f7fb fa92 	bl	8000b44 <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005622:	e00a      	b.n	800563a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005624:	f7fb fa8e 	bl	8000b44 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e04f      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563a:	4b2b      	ldr	r3, [pc, #172]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 020c 	and.w	r2, r3, #12
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	429a      	cmp	r2, r3
 800564a:	d1eb      	bne.n	8005624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800564c:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d20c      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565a:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d001      	beq.n	8005674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e032      	b.n	80056da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4916      	ldr	r1, [pc, #88]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	490e      	ldr	r1, [pc, #56]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056b2:	f000 f821 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 80056b6:	4602      	mov	r2, r0
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	490a      	ldr	r1, [pc, #40]	; (80056ec <HAL_RCC_ClockConfig+0x1c0>)
 80056c4:	5ccb      	ldrb	r3, [r1, r3]
 80056c6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <HAL_RCC_ClockConfig+0x1c4>)
 80056cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCC_ClockConfig+0x1c8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fb f9f2 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40023c00 	.word	0x40023c00
 80056e8:	40023800 	.word	0x40023800
 80056ec:	08009ebc 	.word	0x08009ebc
 80056f0:	20000000 	.word	0x20000000
 80056f4:	20000004 	.word	0x20000004

080056f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056fc:	b090      	sub	sp, #64	; 0x40
 80056fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
 8005704:	2300      	movs	r3, #0
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005708:	2300      	movs	r3, #0
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005710:	4b59      	ldr	r3, [pc, #356]	; (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	d00d      	beq.n	8005738 <HAL_RCC_GetSysClockFreq+0x40>
 800571c:	2b08      	cmp	r3, #8
 800571e:	f200 80a1 	bhi.w	8005864 <HAL_RCC_GetSysClockFreq+0x16c>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x34>
 8005726:	2b04      	cmp	r3, #4
 8005728:	d003      	beq.n	8005732 <HAL_RCC_GetSysClockFreq+0x3a>
 800572a:	e09b      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800572c:	4b53      	ldr	r3, [pc, #332]	; (800587c <HAL_RCC_GetSysClockFreq+0x184>)
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005730:	e09b      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005732:	4b53      	ldr	r3, [pc, #332]	; (8005880 <HAL_RCC_GetSysClockFreq+0x188>)
 8005734:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005736:	e098      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005738:	4b4f      	ldr	r3, [pc, #316]	; (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005742:	4b4d      	ldr	r3, [pc, #308]	; (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d028      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574e:	4b4a      	ldr	r3, [pc, #296]	; (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	099b      	lsrs	r3, r3, #6
 8005754:	2200      	movs	r2, #0
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	627a      	str	r2, [r7, #36]	; 0x24
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005760:	2100      	movs	r1, #0
 8005762:	4b47      	ldr	r3, [pc, #284]	; (8005880 <HAL_RCC_GetSysClockFreq+0x188>)
 8005764:	fb03 f201 	mul.w	r2, r3, r1
 8005768:	2300      	movs	r3, #0
 800576a:	fb00 f303 	mul.w	r3, r0, r3
 800576e:	4413      	add	r3, r2
 8005770:	4a43      	ldr	r2, [pc, #268]	; (8005880 <HAL_RCC_GetSysClockFreq+0x188>)
 8005772:	fba0 1202 	umull	r1, r2, r0, r2
 8005776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005778:	460a      	mov	r2, r1
 800577a:	62ba      	str	r2, [r7, #40]	; 0x28
 800577c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577e:	4413      	add	r3, r2
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	2200      	movs	r2, #0
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	61fa      	str	r2, [r7, #28]
 800578a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800578e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005792:	f7fa fd1f 	bl	80001d4 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4613      	mov	r3, r2
 800579c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800579e:	e053      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a0:	4b35      	ldr	r3, [pc, #212]	; (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	099b      	lsrs	r3, r3, #6
 80057a6:	2200      	movs	r2, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	617a      	str	r2, [r7, #20]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057b2:	f04f 0b00 	mov.w	fp, #0
 80057b6:	4652      	mov	r2, sl
 80057b8:	465b      	mov	r3, fp
 80057ba:	f04f 0000 	mov.w	r0, #0
 80057be:	f04f 0100 	mov.w	r1, #0
 80057c2:	0159      	lsls	r1, r3, #5
 80057c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c8:	0150      	lsls	r0, r2, #5
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	ebb2 080a 	subs.w	r8, r2, sl
 80057d2:	eb63 090b 	sbc.w	r9, r3, fp
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057ea:	ebb2 0408 	subs.w	r4, r2, r8
 80057ee:	eb63 0509 	sbc.w	r5, r3, r9
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	00eb      	lsls	r3, r5, #3
 80057fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005800:	00e2      	lsls	r2, r4, #3
 8005802:	4614      	mov	r4, r2
 8005804:	461d      	mov	r5, r3
 8005806:	eb14 030a 	adds.w	r3, r4, sl
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	eb45 030b 	adc.w	r3, r5, fp
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800581e:	4629      	mov	r1, r5
 8005820:	028b      	lsls	r3, r1, #10
 8005822:	4621      	mov	r1, r4
 8005824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005828:	4621      	mov	r1, r4
 800582a:	028a      	lsls	r2, r1, #10
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	2200      	movs	r2, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	60fa      	str	r2, [r7, #12]
 8005838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800583c:	f7fa fcca 	bl	80001d4 <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4613      	mov	r3, r2
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_RCC_GetSysClockFreq+0x180>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	3301      	adds	r3, #1
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005862:	e002      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <HAL_RCC_GetSysClockFreq+0x184>)
 8005866:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800586c:	4618      	mov	r0, r3
 800586e:	3740      	adds	r7, #64	; 0x40
 8005870:	46bd      	mov	sp, r7
 8005872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	00f42400 	.word	0x00f42400
 8005880:	017d7840 	.word	0x017d7840

08005884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005888:	4b03      	ldr	r3, [pc, #12]	; (8005898 <HAL_RCC_GetHCLKFreq+0x14>)
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000000 	.word	0x20000000

0800589c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058a0:	f7ff fff0 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	0a9b      	lsrs	r3, r3, #10
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4903      	ldr	r1, [pc, #12]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40023800 	.word	0x40023800
 80058c0:	08009ecc 	.word	0x08009ecc

080058c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d035      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058ec:	4b67      	ldr	r3, [pc, #412]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058f2:	f7fb f927 	bl	8000b44 <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058fa:	f7fb f923 	bl	8000b44 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e0ba      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800590c:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1f0      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	071b      	lsls	r3, r3, #28
 8005924:	495a      	ldr	r1, [pc, #360]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800592c:	4b57      	ldr	r3, [pc, #348]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005932:	f7fb f907 	bl	8000b44 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005938:	e008      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800593a:	f7fb f903 	bl	8000b44 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e09a      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800594c:	4b50      	ldr	r3, [pc, #320]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8083 	beq.w	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b49      	ldr	r3, [pc, #292]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	4a48      	ldr	r2, [pc, #288]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005974:	6413      	str	r3, [r2, #64]	; 0x40
 8005976:	4b46      	ldr	r3, [pc, #280]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005982:	4b44      	ldr	r3, [pc, #272]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a43      	ldr	r2, [pc, #268]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800598e:	f7fb f8d9 	bl	8000b44 <HAL_GetTick>
 8005992:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005994:	e008      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005996:	f7fb f8d5 	bl	8000b44 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e06c      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059a8:	4b3a      	ldr	r3, [pc, #232]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02f      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d028      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059d2:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059dc:	4b2e      	ldr	r3, [pc, #184]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059e2:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059e8:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059ee:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d114      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059fa:	f7fb f8a3 	bl	8000b44 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a00:	e00a      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fb f89f 	bl	8000b44 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e034      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a18:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0ee      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a30:	d10d      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005a32:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a46:	4912      	ldr	r1, [pc, #72]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]
 8005a4c:	e005      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a4e:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4a0f      	ldr	r2, [pc, #60]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a58:	6093      	str	r3, [r2, #8]
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a66:	490a      	ldr	r1, [pc, #40]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	7c1a      	ldrb	r2, [r3, #16]
 8005a7c:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a7e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	42470068 	.word	0x42470068
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40007000 	.word	0x40007000
 8005a98:	42470e40 	.word	0x42470e40
 8005a9c:	424711e0 	.word	0x424711e0

08005aa0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e073      	b.n	8005b9e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7f5b      	ldrb	r3, [r3, #29]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fa ff26 	bl	8000918 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d055      	beq.n	8005b8c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	22ca      	movs	r2, #202	; 0xca
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2253      	movs	r2, #83	; 0x53
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f87f 	bl	8005bf4 <RTC_EnterInitMode>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d12c      	bne.n	8005b5a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b12:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6899      	ldr	r1, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68d2      	ldr	r2, [r2, #12]
 8005b3a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6919      	ldr	r1, [r3, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	041a      	lsls	r2, r3, #16
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f886 	bl	8005c62 <RTC_ExitInitMode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d110      	bne.n	8005b82 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	22ff      	movs	r2, #255	; 0xff
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24
 8005b8a:	e001      	b.n	8005b90 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <HAL_RTC_WaitForSynchro+0x48>)
 8005bba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bbc:	f7fa ffc2 	bl	8000b44 <HAL_GetTick>
 8005bc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bc2:	e009      	b.n	8005bd8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bc4:	f7fa ffbe 	bl	8000b44 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e007      	b.n	8005be8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ee      	beq.n	8005bc4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	00013f5f 	.word	0x00013f5f

08005bf4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d122      	bne.n	8005c58 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c22:	f7fa ff8f 	bl	8000b44 <HAL_GetTick>
 8005c26:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c28:	e00c      	b.n	8005c44 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c2a:	f7fa ff8b 	bl	8000b44 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c38:	d904      	bls.n	8005c44 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2204      	movs	r2, #4
 8005c3e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <RTC_EnterInitMode+0x64>
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d1e8      	bne.n	8005c2a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ff8b 	bl	8005ba8 <HAL_RTC_WaitForSynchro>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cac:	b084      	sub	sp, #16
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	f107 001c 	add.w	r0, r7, #28
 8005cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d123      	bne.n	8005d0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fae2 	bl	80072cc <USB_CoreReset>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]
 8005d0c:	e01b      	b.n	8005d46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 fad6 	bl	80072cc <USB_CoreReset>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
 8005d38:	e005      	b.n	8005d46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d46:	7fbb      	ldrb	r3, [r7, #30]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d10b      	bne.n	8005d64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f043 0206 	orr.w	r2, r3, #6
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr

08005d74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d165      	bne.n	8005e54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4a41      	ldr	r2, [pc, #260]	; (8005e90 <USB_SetTurnaroundTime+0x11c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d906      	bls.n	8005d9e <USB_SetTurnaroundTime+0x2a>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4a40      	ldr	r2, [pc, #256]	; (8005e94 <USB_SetTurnaroundTime+0x120>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d202      	bcs.n	8005d9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d98:	230f      	movs	r3, #15
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	e062      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4a3c      	ldr	r2, [pc, #240]	; (8005e94 <USB_SetTurnaroundTime+0x120>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d306      	bcc.n	8005db4 <USB_SetTurnaroundTime+0x40>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4a3b      	ldr	r2, [pc, #236]	; (8005e98 <USB_SetTurnaroundTime+0x124>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d202      	bcs.n	8005db4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005dae:	230e      	movs	r3, #14
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	e057      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4a38      	ldr	r2, [pc, #224]	; (8005e98 <USB_SetTurnaroundTime+0x124>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d306      	bcc.n	8005dca <USB_SetTurnaroundTime+0x56>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a37      	ldr	r2, [pc, #220]	; (8005e9c <USB_SetTurnaroundTime+0x128>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d202      	bcs.n	8005dca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005dc4:	230d      	movs	r3, #13
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	e04c      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4a33      	ldr	r2, [pc, #204]	; (8005e9c <USB_SetTurnaroundTime+0x128>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d306      	bcc.n	8005de0 <USB_SetTurnaroundTime+0x6c>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4a32      	ldr	r2, [pc, #200]	; (8005ea0 <USB_SetTurnaroundTime+0x12c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d802      	bhi.n	8005de0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dda:	230c      	movs	r3, #12
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e041      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <USB_SetTurnaroundTime+0x12c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d906      	bls.n	8005df6 <USB_SetTurnaroundTime+0x82>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4a2e      	ldr	r2, [pc, #184]	; (8005ea4 <USB_SetTurnaroundTime+0x130>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d802      	bhi.n	8005df6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005df0:	230b      	movs	r3, #11
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e036      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <USB_SetTurnaroundTime+0x130>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d906      	bls.n	8005e0c <USB_SetTurnaroundTime+0x98>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <USB_SetTurnaroundTime+0x134>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d802      	bhi.n	8005e0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e06:	230a      	movs	r3, #10
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	e02b      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4a26      	ldr	r2, [pc, #152]	; (8005ea8 <USB_SetTurnaroundTime+0x134>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d906      	bls.n	8005e22 <USB_SetTurnaroundTime+0xae>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4a25      	ldr	r2, [pc, #148]	; (8005eac <USB_SetTurnaroundTime+0x138>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d202      	bcs.n	8005e22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e1c:	2309      	movs	r3, #9
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	e020      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4a21      	ldr	r2, [pc, #132]	; (8005eac <USB_SetTurnaroundTime+0x138>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d306      	bcc.n	8005e38 <USB_SetTurnaroundTime+0xc4>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <USB_SetTurnaroundTime+0x13c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d802      	bhi.n	8005e38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e32:	2308      	movs	r3, #8
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e015      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <USB_SetTurnaroundTime+0x13c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d906      	bls.n	8005e4e <USB_SetTurnaroundTime+0xda>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <USB_SetTurnaroundTime+0x140>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d202      	bcs.n	8005e4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e48:	2307      	movs	r3, #7
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e00a      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e4e:	2306      	movs	r3, #6
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e007      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d102      	bne.n	8005e60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e5a:	2309      	movs	r3, #9
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e001      	b.n	8005e64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e60:	2309      	movs	r3, #9
 8005e62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	00d8acbf 	.word	0x00d8acbf
 8005e94:	00e4e1c0 	.word	0x00e4e1c0
 8005e98:	00f42400 	.word	0x00f42400
 8005e9c:	01067380 	.word	0x01067380
 8005ea0:	011a499f 	.word	0x011a499f
 8005ea4:	01312cff 	.word	0x01312cff
 8005ea8:	014ca43f 	.word	0x014ca43f
 8005eac:	016e3600 	.word	0x016e3600
 8005eb0:	01a6ab1f 	.word	0x01a6ab1f
 8005eb4:	01e84800 	.word	0x01e84800

08005eb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f043 0201 	orr.w	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f023 0201 	bic.w	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d115      	bne.n	8005f4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f2a:	200a      	movs	r0, #10
 8005f2c:	f7fa fe16 	bl	8000b5c <HAL_Delay>
      ms += 10U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	330a      	adds	r3, #10
 8005f34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f939 	bl	80071ae <USB_GetMode>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d01e      	beq.n	8005f80 <USB_SetCurrentMode+0x84>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2bc7      	cmp	r3, #199	; 0xc7
 8005f46:	d9f0      	bls.n	8005f2a <USB_SetCurrentMode+0x2e>
 8005f48:	e01a      	b.n	8005f80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d115      	bne.n	8005f7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f5c:	200a      	movs	r0, #10
 8005f5e:	f7fa fdfd 	bl	8000b5c <HAL_Delay>
      ms += 10U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	330a      	adds	r3, #10
 8005f66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 f920 	bl	80071ae <USB_GetMode>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <USB_SetCurrentMode+0x84>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2bc7      	cmp	r3, #199	; 0xc7
 8005f78:	d9f0      	bls.n	8005f5c <USB_SetCurrentMode+0x60>
 8005f7a:	e001      	b.n	8005f80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e005      	b.n	8005f8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2bc8      	cmp	r3, #200	; 0xc8
 8005f84:	d101      	bne.n	8005f8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f94:	b084      	sub	sp, #16
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b086      	sub	sp, #24
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e009      	b.n	8005fc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	3340      	adds	r3, #64	; 0x40
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b0e      	cmp	r3, #14
 8005fcc:	d9f2      	bls.n	8005fb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11c      	bne.n	8006010 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe4:	f043 0302 	orr.w	r3, r3, #2
 8005fe8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
 800600e:	e00b      	b.n	8006028 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800602e:	461a      	mov	r2, r3
 8006030:	2300      	movs	r3, #0
 8006032:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006034:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10d      	bne.n	8006058 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800603c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006044:	2100      	movs	r1, #0
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f968 	bl	800631c <USB_SetDevSpeed>
 800604c:	e008      	b.n	8006060 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800604e:	2101      	movs	r1, #1
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f963 	bl	800631c <USB_SetDevSpeed>
 8006056:	e003      	b.n	8006060 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006058:	2103      	movs	r1, #3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f95e 	bl	800631c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006060:	2110      	movs	r1, #16
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8fa 	bl	800625c <USB_FlushTxFifo>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f924 	bl	80062c0 <USB_FlushRxFifo>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	461a      	mov	r2, r3
 800608a:	2300      	movs	r3, #0
 800608c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	461a      	mov	r2, r3
 8006096:	2300      	movs	r3, #0
 8006098:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a0:	461a      	mov	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	e043      	b.n	8006134 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c2:	d118      	bne.n	80060f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	461a      	mov	r2, r3
 80060d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e013      	b.n	8006108 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	461a      	mov	r2, r3
 80060ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e008      	b.n	8006108 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	461a      	mov	r2, r3
 8006104:	2300      	movs	r3, #0
 8006106:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	2300      	movs	r3, #0
 8006118:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006126:	461a      	mov	r2, r3
 8006128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800612c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	3301      	adds	r3, #1
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006138:	461a      	mov	r2, r3
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4293      	cmp	r3, r2
 800613e:	d3b5      	bcc.n	80060ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e043      	b.n	80061ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615c:	d118      	bne.n	8006190 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	461a      	mov	r2, r3
 8006172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e013      	b.n	80061a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	461a      	mov	r2, r3
 8006188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e008      	b.n	80061a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	461a      	mov	r2, r3
 80061c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061d2:	461a      	mov	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d3b5      	bcc.n	8006146 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f043 0210 	orr.w	r2, r3, #16
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699a      	ldr	r2, [r3, #24]
 8006214:	4b10      	ldr	r3, [pc, #64]	; (8006258 <USB_DevInit+0x2c4>)
 8006216:	4313      	orrs	r3, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800621c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f043 0208 	orr.w	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006230:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006234:	2b01      	cmp	r3, #1
 8006236:	d107      	bne.n	8006248 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006240:	f043 0304 	orr.w	r3, r3, #4
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006254:	b004      	add	sp, #16
 8006256:	4770      	bx	lr
 8006258:	803c3800 	.word	0x803c3800

0800625c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006276:	d901      	bls.n	800627c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e01b      	b.n	80062b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	daf2      	bge.n	800626a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	019b      	lsls	r3, r3, #6
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062a0:	d901      	bls.n	80062a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e006      	b.n	80062b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d0f0      	beq.n	8006294 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062d8:	d901      	bls.n	80062de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e018      	b.n	8006310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	daf2      	bge.n	80062cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2210      	movs	r2, #16
 80062ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062fc:	d901      	bls.n	8006302 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e006      	b.n	8006310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b10      	cmp	r3, #16
 800630c:	d0f0      	beq.n	80062f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	68f9      	ldr	r1, [r7, #12]
 8006338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800634e:	b480      	push	{r7}
 8006350:	b087      	sub	sp, #28
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 0306 	and.w	r3, r3, #6
 8006366:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800636e:	2300      	movs	r3, #0
 8006370:	75fb      	strb	r3, [r7, #23]
 8006372:	e00a      	b.n	800638a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d002      	beq.n	8006380 <USB_GetDevSpeed+0x32>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b06      	cmp	r3, #6
 800637e:	d102      	bne.n	8006386 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006380:	2302      	movs	r3, #2
 8006382:	75fb      	strb	r3, [r7, #23]
 8006384:	e001      	b.n	800638a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006386:	230f      	movs	r3, #15
 8006388:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d13a      	bne.n	800642a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	68f9      	ldr	r1, [r7, #12]
 80063ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d155      	bne.n	8006498 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	791b      	ldrb	r3, [r3, #4]
 8006406:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006408:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	059b      	lsls	r3, r3, #22
 800640e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006410:	4313      	orrs	r3, r2
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	e036      	b.n	8006498 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	2101      	movs	r1, #1
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	041b      	lsls	r3, r3, #16
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006448:	4313      	orrs	r3, r2
 800644a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d11a      	bne.n	8006498 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	791b      	ldrb	r3, [r3, #4]
 800647c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800647e:	430b      	orrs	r3, r1
 8006480:	4313      	orrs	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006496:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d161      	bne.n	8006588 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064da:	d11f      	bne.n	800651c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800651a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	b29b      	uxth	r3, r3
 8006534:	43db      	mvns	r3, r3
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653c:	4013      	ands	r3, r2
 800653e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	2101      	movs	r1, #1
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	b29b      	uxth	r3, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006560:	4013      	ands	r3, r2
 8006562:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	0159      	lsls	r1, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	440b      	add	r3, r1
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	4619      	mov	r1, r3
 8006580:	4b35      	ldr	r3, [pc, #212]	; (8006658 <USB_DeactivateEndpoint+0x1b0>)
 8006582:	4013      	ands	r3, r2
 8006584:	600b      	str	r3, [r1, #0]
 8006586:	e060      	b.n	800664a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659e:	d11f      	bne.n	80065e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	43db      	mvns	r3, r3
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006600:	4013      	ands	r3, r2
 8006602:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	2101      	movs	r1, #1
 8006616:	fa01 f303 	lsl.w	r3, r1, r3
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	43db      	mvns	r3, r3
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006624:	4013      	ands	r3, r2
 8006626:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	0159      	lsls	r1, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	440b      	add	r3, r1
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	4619      	mov	r1, r3
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <USB_DeactivateEndpoint+0x1b4>)
 8006646:	4013      	ands	r3, r2
 8006648:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	ec337800 	.word	0xec337800
 800665c:	eff37800 	.word	0xeff37800

08006660 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 817a 	bne.w	8006976 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d132      	bne.n	80066f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e8:	0cdb      	lsrs	r3, r3, #19
 80066ea:	04db      	lsls	r3, r3, #19
 80066ec:	6113      	str	r3, [r2, #16]
 80066ee:	e092      	b.n	8006816 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670a:	0cdb      	lsrs	r3, r3, #19
 800670c:	04db      	lsls	r3, r3, #19
 800670e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800672e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006732:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11a      	bne.n	8006770 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	429a      	cmp	r2, r3
 8006744:	d903      	bls.n	800674e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800676c:	6113      	str	r3, [r2, #16]
 800676e:	e01b      	b.n	80067a8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6919      	ldr	r1, [r3, #16]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	440b      	add	r3, r1
 8006788:	1e59      	subs	r1, r3, #1
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006792:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006794:	4ba2      	ldr	r3, [pc, #648]	; (8006a20 <USB_EPStartXfer+0x3c0>)
 8006796:	400b      	ands	r3, r1
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	0148      	lsls	r0, r1, #5
 800679c:	69f9      	ldr	r1, [r7, #28]
 800679e:	4401      	add	r1, r0
 80067a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067a4:	4313      	orrs	r3, r2
 80067a6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067be:	69b9      	ldr	r1, [r7, #24]
 80067c0:	0148      	lsls	r0, r1, #5
 80067c2:	69f9      	ldr	r1, [r7, #28]
 80067c4:	4401      	add	r1, r0
 80067c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ca:	4313      	orrs	r3, r2
 80067cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	791b      	ldrb	r3, [r3, #4]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d11f      	bne.n	8006816 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006814:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d14b      	bne.n	80068b4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d128      	bne.n	8006892 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d110      	bne.n	8006872 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e00f      	b.n	8006892 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006890:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	e165      	b.n	8006b80 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	791b      	ldrb	r3, [r3, #4]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d015      	beq.n	8006908 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 814d 	beq.w	8006b80 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	2101      	movs	r1, #1
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	69f9      	ldr	r1, [r7, #28]
 80068fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006902:	4313      	orrs	r3, r2
 8006904:	634b      	str	r3, [r1, #52]	; 0x34
 8006906:	e13b      	b.n	8006b80 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d110      	bne.n	800693a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	e00f      	b.n	800695a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006958:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	b298      	uxth	r0, r3
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	4603      	mov	r3, r0
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f9b8 	bl	8006ce4 <USB_WritePacket>
 8006974:	e104      	b.n	8006b80 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	0cdb      	lsrs	r3, r3, #19
 8006992:	04db      	lsls	r3, r3, #19
 8006994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069b8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d131      	bne.n	8006a24 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ee:	69b9      	ldr	r1, [r7, #24]
 80069f0:	0148      	lsls	r0, r1, #5
 80069f2:	69f9      	ldr	r1, [r7, #28]
 80069f4:	4401      	add	r1, r0
 80069f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069fa:	4313      	orrs	r3, r2
 80069fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1c:	6113      	str	r3, [r2, #16]
 8006a1e:	e061      	b.n	8006ae4 <USB_EPStartXfer+0x484>
 8006a20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d123      	bne.n	8006a74 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a42:	69b9      	ldr	r1, [r7, #24]
 8006a44:	0148      	lsls	r0, r1, #5
 8006a46:	69f9      	ldr	r1, [r7, #28]
 8006a48:	4401      	add	r1, r0
 8006a4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a70:	6113      	str	r3, [r2, #16]
 8006a72:	e037      	b.n	8006ae4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	1e5a      	subs	r2, r3, #1
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	8afa      	ldrh	r2, [r7, #22]
 8006a90:	fb03 f202 	mul.w	r2, r3, r2
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	8afb      	ldrh	r3, [r7, #22]
 8006aa8:	04d9      	lsls	r1, r3, #19
 8006aaa:	4b38      	ldr	r3, [pc, #224]	; (8006b8c <USB_EPStartXfer+0x52c>)
 8006aac:	400b      	ands	r3, r1
 8006aae:	69b9      	ldr	r1, [r7, #24]
 8006ab0:	0148      	lsls	r0, r1, #5
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	4401      	add	r1, r0
 8006ab6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006aba:	4313      	orrs	r3, r2
 8006abc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	0148      	lsls	r0, r1, #5
 8006ad8:	69f9      	ldr	r1, [r7, #28]
 8006ada:	4401      	add	r1, r0
 8006adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d10d      	bne.n	8006b06 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68d9      	ldr	r1, [r3, #12]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b02:	460a      	mov	r2, r1
 8006b04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	791b      	ldrb	r3, [r3, #4]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d128      	bne.n	8006b60 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d110      	bne.n	8006b40 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e00f      	b.n	8006b60 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	1ff80000 	.word	0x1ff80000

08006b90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d14a      	bne.n	8006c44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc6:	f040 8086 	bne.w	8006cd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	7812      	ldrb	r2, [r2, #0]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d902      	bls.n	8006c28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
          break;
 8006c26:	e056      	b.n	8006cd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c40:	d0e7      	beq.n	8006c12 <USB_EPStopXfer+0x82>
 8006c42:	e048      	b.n	8006cd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c5c:	d13b      	bne.n	8006cd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	7812      	ldrb	r2, [r2, #0]
 8006c96:	0151      	lsls	r1, r2, #5
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f242 7210 	movw	r2, #10000	; 0x2710
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d902      	bls.n	8006cbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cba:	e00c      	b.n	8006cd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd4:	d0e7      	beq.n	8006ca6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b089      	sub	sp, #36	; 0x24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4611      	mov	r1, r2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	71fb      	strb	r3, [r7, #7]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d123      	bne.n	8006d52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d0a:	88bb      	ldrh	r3, [r7, #4]
 8006d0c:	3303      	adds	r3, #3
 8006d0e:	089b      	lsrs	r3, r3, #2
 8006d10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	e018      	b.n	8006d4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	031a      	lsls	r2, r3, #12
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d24:	461a      	mov	r2, r3
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	3301      	adds	r3, #1
 8006d42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	3301      	adds	r3, #1
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3e2      	bcc.n	8006d18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3724      	adds	r7, #36	; 0x24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b08b      	sub	sp, #44	; 0x2c
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	089b      	lsrs	r3, r3, #2
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	623b      	str	r3, [r7, #32]
 8006d8a:	e014      	b.n	8006db6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	3301      	adds	r3, #1
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	3301      	adds	r3, #1
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	3301      	adds	r3, #1
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	3301      	adds	r3, #1
 8006db4:	623b      	str	r3, [r7, #32]
 8006db6:	6a3a      	ldr	r2, [r7, #32]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d3e6      	bcc.n	8006d8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006dbe:	8bfb      	ldrh	r3, [r7, #30]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01e      	beq.n	8006e02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f107 0310 	add.w	r3, r7, #16
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	701a      	strb	r2, [r3, #0]
      i++;
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	3301      	adds	r3, #1
 8006dee:	623b      	str	r3, [r7, #32]
      pDest++;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	3301      	adds	r3, #1
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006df6:	8bfb      	ldrh	r3, [r7, #30]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006dfc:	8bfb      	ldrh	r3, [r7, #30]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1ea      	bne.n	8006dd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	372c      	adds	r7, #44	; 0x2c
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d12c      	bne.n	8006e86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	db12      	blt.n	8006e64 <USB_EPSetStall+0x54>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00f      	beq.n	8006e64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	0151      	lsls	r1, r2, #5
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	440a      	add	r2, r1
 8006e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e02b      	b.n	8006ede <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	db12      	blt.n	8006ebe <USB_EPSetStall+0xae>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00f      	beq.n	8006ebe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ebc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	0151      	lsls	r1, r2, #5
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006edc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d128      	bne.n	8006f5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	791b      	ldrb	r3, [r3, #4]
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d003      	beq.n	8006f38 <USB_EPClearStall+0x4c>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	791b      	ldrb	r3, [r3, #4]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d138      	bne.n	8006faa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	e027      	b.n	8006faa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	791b      	ldrb	r3, [r3, #4]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d003      	beq.n	8006f8a <USB_EPClearStall+0x9e>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	791b      	ldrb	r3, [r3, #4]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d10f      	bne.n	8006faa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fec:	68f9      	ldr	r1, [r7, #12]
 8006fee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800701e:	f023 0303 	bic.w	r3, r3, #3
 8007022:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007032:	f023 0302 	bic.w	r3, r3, #2
 8007036:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007074:	f043 0302 	orr.w	r3, r3, #2
 8007078:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4013      	ands	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070a0:	68fb      	ldr	r3, [r7, #12]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	4013      	ands	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	0c1b      	lsrs	r3, r3, #16
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	4013      	ands	r3, r2
 8007104:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	b29b      	uxth	r3, r3
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007144:	68bb      	ldr	r3, [r7, #8]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007152:	b480      	push	{r7}
 8007154:	b087      	sub	sp, #28
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	01db      	lsls	r3, r3, #7
 8007184:	b2db      	uxtb	r3, r3
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4013      	ands	r3, r2
 800719e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071a0:	68bb      	ldr	r3, [r7, #8]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f003 0301 	and.w	r3, r3, #1
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	460b      	mov	r3, r1
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	333c      	adds	r3, #60	; 0x3c
 8007226:	3304      	adds	r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4a26      	ldr	r2, [pc, #152]	; (80072c8 <USB_EP0_OutStart+0xb8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d90a      	bls.n	800724a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007244:	d101      	bne.n	800724a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	e037      	b.n	80072ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	461a      	mov	r2, r3
 8007252:	2300      	movs	r3, #0
 8007254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007278:	f043 0318 	orr.w	r3, r3, #24
 800727c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800728c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007290:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d10f      	bne.n	80072b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	4f54300a 	.word	0x4f54300a

080072cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80072e4:	d901      	bls.n	80072ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e01b      	b.n	8007322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	daf2      	bge.n	80072d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f043 0201 	orr.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800730e:	d901      	bls.n	8007314 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e006      	b.n	8007322 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b01      	cmp	r3, #1
 800731e:	d0f0      	beq.n	8007302 <USB_CoreReset+0x36>

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <mpu6500_readReg>:
#define MPU6500_I2C_ADDR (0x68 << 1) //0x68 when addr pin is low

extern I2C_HandleTypeDef hi2c1;

uint8_t mpu6500_readReg(uint8_t regAddr, uint8_t * regData)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af04      	add	r7, sp, #16
 8007336:	4603      	mov	r3, r0
 8007338:	6039      	str	r1, [r7, #0]
 800733a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6500_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, regData, 1, 1000);
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	b29a      	uxth	r2, r3
 8007340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007344:	9302      	str	r3, [sp, #8]
 8007346:	2301      	movs	r3, #1
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	2301      	movs	r3, #1
 8007350:	21d0      	movs	r1, #208	; 0xd0
 8007352:	4807      	ldr	r0, [pc, #28]	; (8007370 <mpu6500_readReg+0x40>)
 8007354:	f7fa f940 	bl	80015d8 <HAL_I2C_Mem_Read>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	2b00      	cmp	r3, #0
 8007360:	bf0c      	ite	eq
 8007362:	2301      	moveq	r3, #1
 8007364:	2300      	movne	r3, #0
 8007366:	b2db      	uxtb	r3, r3
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000118 	.word	0x20000118

08007374 <mpu6500_readMem>:

uint8_t mpu6500_readMem(uint8_t regAddr, uint8_t size, uint8_t * memData)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af04      	add	r7, sp, #16
 800737a:	4603      	mov	r3, r0
 800737c:	603a      	str	r2, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
 8007380:	460b      	mov	r3, r1
 8007382:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MPU6500_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, memData, size, 1000);
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	b29a      	uxth	r2, r3
 8007388:	79bb      	ldrb	r3, [r7, #6]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007390:	9102      	str	r1, [sp, #8]
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	2301      	movs	r3, #1
 800739a:	21d0      	movs	r1, #208	; 0xd0
 800739c:	4807      	ldr	r0, [pc, #28]	; (80073bc <mpu6500_readMem+0x48>)
 800739e:	f7fa f91b 	bl	80015d8 <HAL_I2C_Mem_Read>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bf0c      	ite	eq
 80073ac:	2301      	moveq	r3, #1
 80073ae:	2300      	movne	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000118 	.word	0x20000118

080073c0 <mpu6500_writeReg>:

uint8_t mpu6500_writeReg(uint8_t regAddr, uint8_t regData)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af04      	add	r7, sp, #16
 80073c6:	4603      	mov	r3, r0
 80073c8:	460a      	mov	r2, r1
 80073ca:	71fb      	strb	r3, [r7, #7]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, MPU6500_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, regData, 1, 1000);
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	79bb      	ldrb	r3, [r7, #6]
 80073d6:	4619      	mov	r1, r3
 80073d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073dc:	9302      	str	r3, [sp, #8]
 80073de:	2301      	movs	r3, #1
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	9100      	str	r1, [sp, #0]
 80073e4:	2301      	movs	r3, #1
 80073e6:	21d0      	movs	r1, #208	; 0xd0
 80073e8:	4807      	ldr	r0, [pc, #28]	; (8007408 <mpu6500_writeReg+0x48>)
 80073ea:	f7f9 fffb 	bl	80013e4 <HAL_I2C_Mem_Write>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	bf0c      	ite	eq
 80073f8:	2301      	moveq	r3, #1
 80073fa:	2300      	movne	r3, #0
 80073fc:	b2db      	uxtb	r3, r3
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000118 	.word	0x20000118

0800740c <mpu6500_accelSelfTest>:


uint8_t mpu6500_accelSelfTest()
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
	return mpu6500_writeReg(MPU6500_ACCEL_CONFIG, 0xE0); // 0xE0 0b11100000
 8007410:	21e0      	movs	r1, #224	; 0xe0
 8007412:	201c      	movs	r0, #28
 8007414:	f7ff ffd4 	bl	80073c0 <mpu6500_writeReg>
 8007418:	4603      	mov	r3, r0
}
 800741a:	4618      	mov	r0, r3
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800742c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007430:	f002 fc24 	bl	8009c7c <USBD_static_malloc>
 8007434:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d109      	bne.n	8007450 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	32b0      	adds	r2, #176	; 0xb0
 8007446:	2100      	movs	r1, #0
 8007448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800744c:	2302      	movs	r3, #2
 800744e:	e0d4      	b.n	80075fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007450:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007454:	2100      	movs	r1, #0
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f002 fc78 	bl	8009d4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	32b0      	adds	r2, #176	; 0xb0
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32b0      	adds	r2, #176	; 0xb0
 8007476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7c1b      	ldrb	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d138      	bne.n	80074fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007488:	4b5e      	ldr	r3, [pc, #376]	; (8007604 <USBD_CDC_Init+0x1e4>)
 800748a:	7819      	ldrb	r1, [r3, #0]
 800748c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007490:	2202      	movs	r2, #2
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f002 facf 	bl	8009a36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007498:	4b5a      	ldr	r3, [pc, #360]	; (8007604 <USBD_CDC_Init+0x1e4>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	2201      	movs	r2, #1
 80074b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074b2:	4b55      	ldr	r3, [pc, #340]	; (8007608 <USBD_CDC_Init+0x1e8>)
 80074b4:	7819      	ldrb	r1, [r3, #0]
 80074b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ba:	2202      	movs	r2, #2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f002 faba 	bl	8009a36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074c2:	4b51      	ldr	r3, [pc, #324]	; (8007608 <USBD_CDC_Init+0x1e8>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074da:	2201      	movs	r2, #1
 80074dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074de:	4b4b      	ldr	r3, [pc, #300]	; (800760c <USBD_CDC_Init+0x1ec>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	3326      	adds	r3, #38	; 0x26
 80074f4:	2210      	movs	r2, #16
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e035      	b.n	8007566 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074fa:	4b42      	ldr	r3, [pc, #264]	; (8007604 <USBD_CDC_Init+0x1e4>)
 80074fc:	7819      	ldrb	r1, [r3, #0]
 80074fe:	2340      	movs	r3, #64	; 0x40
 8007500:	2202      	movs	r2, #2
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f002 fa97 	bl	8009a36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007508:	4b3e      	ldr	r3, [pc, #248]	; (8007604 <USBD_CDC_Init+0x1e4>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	3324      	adds	r3, #36	; 0x24
 800751e:	2201      	movs	r2, #1
 8007520:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007522:	4b39      	ldr	r3, [pc, #228]	; (8007608 <USBD_CDC_Init+0x1e8>)
 8007524:	7819      	ldrb	r1, [r3, #0]
 8007526:	2340      	movs	r3, #64	; 0x40
 8007528:	2202      	movs	r2, #2
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f002 fa83 	bl	8009a36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007530:	4b35      	ldr	r3, [pc, #212]	; (8007608 <USBD_CDC_Init+0x1e8>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007548:	2201      	movs	r2, #1
 800754a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800754c:	4b2f      	ldr	r3, [pc, #188]	; (800760c <USBD_CDC_Init+0x1ec>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f003 020f 	and.w	r2, r3, #15
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	3326      	adds	r3, #38	; 0x26
 8007562:	2210      	movs	r2, #16
 8007564:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007566:	4b29      	ldr	r3, [pc, #164]	; (800760c <USBD_CDC_Init+0x1ec>)
 8007568:	7819      	ldrb	r1, [r3, #0]
 800756a:	2308      	movs	r3, #8
 800756c:	2203      	movs	r2, #3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f002 fa61 	bl	8009a36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007574:	4b25      	ldr	r3, [pc, #148]	; (800760c <USBD_CDC_Init+0x1ec>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 020f 	and.w	r2, r3, #15
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	3324      	adds	r3, #36	; 0x24
 800758a:	2201      	movs	r2, #1
 800758c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	33b0      	adds	r3, #176	; 0xb0
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e018      	b.n	80075fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7c1b      	ldrb	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075d0:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <USBD_CDC_Init+0x1e8>)
 80075d2:	7819      	ldrb	r1, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f002 fb18 	bl	8009c14 <USBD_LL_PrepareReceive>
 80075e4:	e008      	b.n	80075f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <USBD_CDC_Init+0x1e8>)
 80075e8:	7819      	ldrb	r1, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075f0:	2340      	movs	r3, #64	; 0x40
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 fb0e 	bl	8009c14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000093 	.word	0x20000093
 8007608:	20000094 	.word	0x20000094
 800760c:	20000095 	.word	0x20000095

08007610 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800761c:	4b3a      	ldr	r3, [pc, #232]	; (8007708 <USBD_CDC_DeInit+0xf8>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f002 fa2d 	bl	8009a82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007628:	4b37      	ldr	r3, [pc, #220]	; (8007708 <USBD_CDC_DeInit+0xf8>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	3324      	adds	r3, #36	; 0x24
 800763e:	2200      	movs	r2, #0
 8007640:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007642:	4b32      	ldr	r3, [pc, #200]	; (800770c <USBD_CDC_DeInit+0xfc>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f002 fa1a 	bl	8009a82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800764e:	4b2f      	ldr	r3, [pc, #188]	; (800770c <USBD_CDC_DeInit+0xfc>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	f003 020f 	and.w	r2, r3, #15
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007666:	2200      	movs	r2, #0
 8007668:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800766a:	4b29      	ldr	r3, [pc, #164]	; (8007710 <USBD_CDC_DeInit+0x100>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f002 fa06 	bl	8009a82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007676:	4b26      	ldr	r3, [pc, #152]	; (8007710 <USBD_CDC_DeInit+0x100>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 020f 	and.w	r2, r3, #15
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	3324      	adds	r3, #36	; 0x24
 800768c:	2200      	movs	r2, #0
 800768e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007690:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <USBD_CDC_DeInit+0x100>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 020f 	and.w	r2, r3, #15
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	3326      	adds	r3, #38	; 0x26
 80076a6:	2200      	movs	r2, #0
 80076a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	32b0      	adds	r2, #176	; 0xb0
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01f      	beq.n	80076fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	33b0      	adds	r3, #176	; 0xb0
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32b0      	adds	r2, #176	; 0xb0
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	4618      	mov	r0, r3
 80076e0:	f002 fada 	bl	8009c98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32b0      	adds	r2, #176	; 0xb0
 80076ee:	2100      	movs	r1, #0
 80076f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000093 	.word	0x20000093
 800770c:	20000094 	.word	0x20000094
 8007710:	20000095 	.word	0x20000095

08007714 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	32b0      	adds	r2, #176	; 0xb0
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	e0bf      	b.n	80078c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800774c:	2b00      	cmp	r3, #0
 800774e:	d050      	beq.n	80077f2 <USBD_CDC_Setup+0xde>
 8007750:	2b20      	cmp	r3, #32
 8007752:	f040 80af 	bne.w	80078b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d03a      	beq.n	80077d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b25b      	sxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	da1b      	bge.n	80077a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	33b0      	adds	r3, #176	; 0xb0
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800777e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	88d2      	ldrh	r2, [r2, #6]
 8007784:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	88db      	ldrh	r3, [r3, #6]
 800778a:	2b07      	cmp	r3, #7
 800778c:	bf28      	it	cs
 800778e:	2307      	movcs	r3, #7
 8007790:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	89fa      	ldrh	r2, [r7, #14]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 fd49 	bl	8009230 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800779e:	e090      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	785a      	ldrb	r2, [r3, #1]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	2b3f      	cmp	r3, #63	; 0x3f
 80077b0:	d803      	bhi.n	80077ba <USBD_CDC_Setup+0xa6>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	88db      	ldrh	r3, [r3, #6]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	e000      	b.n	80077bc <USBD_CDC_Setup+0xa8>
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80077c2:	6939      	ldr	r1, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80077ca:	461a      	mov	r2, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 fd5b 	bl	8009288 <USBD_CtlPrepareRx>
      break;
 80077d2:	e076      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	33b0      	adds	r3, #176	; 0xb0
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	7850      	ldrb	r0, [r2, #1]
 80077ea:	2200      	movs	r2, #0
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	4798      	blx	r3
      break;
 80077f0:	e067      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b0b      	cmp	r3, #11
 80077f8:	d851      	bhi.n	800789e <USBD_CDC_Setup+0x18a>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <USBD_CDC_Setup+0xec>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007831 	.word	0x08007831
 8007804:	080078ad 	.word	0x080078ad
 8007808:	0800789f 	.word	0x0800789f
 800780c:	0800789f 	.word	0x0800789f
 8007810:	0800789f 	.word	0x0800789f
 8007814:	0800789f 	.word	0x0800789f
 8007818:	0800789f 	.word	0x0800789f
 800781c:	0800789f 	.word	0x0800789f
 8007820:	0800789f 	.word	0x0800789f
 8007824:	0800789f 	.word	0x0800789f
 8007828:	0800785b 	.word	0x0800785b
 800782c:	08007885 	.word	0x08007885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b03      	cmp	r3, #3
 800783a:	d107      	bne.n	800784c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800783c:	f107 030a 	add.w	r3, r7, #10
 8007840:	2202      	movs	r2, #2
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fcf3 	bl	8009230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800784a:	e032      	b.n	80078b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fc7d 	bl	800914e <USBD_CtlError>
            ret = USBD_FAIL;
 8007854:	2303      	movs	r3, #3
 8007856:	75fb      	strb	r3, [r7, #23]
          break;
 8007858:	e02b      	b.n	80078b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b03      	cmp	r3, #3
 8007864:	d107      	bne.n	8007876 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007866:	f107 030d 	add.w	r3, r7, #13
 800786a:	2201      	movs	r2, #1
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fcde 	bl	8009230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007874:	e01d      	b.n	80078b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 fc68 	bl	800914e <USBD_CtlError>
            ret = USBD_FAIL;
 800787e:	2303      	movs	r3, #3
 8007880:	75fb      	strb	r3, [r7, #23]
          break;
 8007882:	e016      	b.n	80078b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b03      	cmp	r3, #3
 800788e:	d00f      	beq.n	80078b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 fc5b 	bl	800914e <USBD_CtlError>
            ret = USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800789c:	e008      	b.n	80078b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fc54 	bl	800914e <USBD_CtlError>
          ret = USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	75fb      	strb	r3, [r7, #23]
          break;
 80078aa:	e002      	b.n	80078b2 <USBD_CDC_Setup+0x19e>
          break;
 80078ac:	bf00      	nop
 80078ae:	e008      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>
          break;
 80078b0:	bf00      	nop
      }
      break;
 80078b2:	e006      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fc49 	bl	800914e <USBD_CtlError>
      ret = USBD_FAIL;
 80078bc:	2303      	movs	r3, #3
 80078be:	75fb      	strb	r3, [r7, #23]
      break;
 80078c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32b0      	adds	r2, #176	; 0xb0
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e065      	b.n	80079c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	32b0      	adds	r2, #176	; 0xb0
 8007900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	f003 020f 	and.w	r2, r3, #15
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	3318      	adds	r3, #24
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d02f      	beq.n	8007980 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	f003 020f 	and.w	r2, r3, #15
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	3318      	adds	r3, #24
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	f003 010f 	and.w	r1, r3, #15
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	460b      	mov	r3, r1
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	440b      	add	r3, r1
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4403      	add	r3, r0
 8007948:	331c      	adds	r3, #28
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007956:	2b00      	cmp	r3, #0
 8007958:	d112      	bne.n	8007980 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3318      	adds	r3, #24
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007972:	78f9      	ldrb	r1, [r7, #3]
 8007974:	2300      	movs	r3, #0
 8007976:	2200      	movs	r2, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f002 f92a 	bl	8009bd2 <USBD_LL_Transmit>
 800797e:	e01f      	b.n	80079c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	33b0      	adds	r3, #176	; 0xb0
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d010      	beq.n	80079c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	33b0      	adds	r3, #176	; 0xb0
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	32b0      	adds	r2, #176	; 0xb0
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	32b0      	adds	r2, #176	; 0xb0
 80079f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e01a      	b.n	8007a32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f002 f928 	bl	8009c56 <USBD_LL_GetRxDataSize>
 8007a06:	4602      	mov	r2, r0
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	33b0      	adds	r3, #176	; 0xb0
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	32b0      	adds	r2, #176	; 0xb0
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e025      	b.n	8007aa8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	33b0      	adds	r3, #176	; 0xb0
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01a      	beq.n	8007aa6 <USBD_CDC_EP0_RxReady+0x6c>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a76:	2bff      	cmp	r3, #255	; 0xff
 8007a78:	d015      	beq.n	8007aa6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	33b0      	adds	r3, #176	; 0xb0
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a9a:	b292      	uxth	r2, r2
 8007a9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	22ff      	movs	r2, #255	; 0xff
 8007aa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ab8:	2182      	movs	r1, #130	; 0x82
 8007aba:	4818      	ldr	r0, [pc, #96]	; (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007abc:	f000 fd0f 	bl	80084de <USBD_GetEpDesc>
 8007ac0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4815      	ldr	r0, [pc, #84]	; (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ac6:	f000 fd0a 	bl	80084de <USBD_GetEpDesc>
 8007aca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007acc:	2181      	movs	r1, #129	; 0x81
 8007ace:	4813      	ldr	r0, [pc, #76]	; (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ad0:	f000 fd05 	bl	80084de <USBD_GetEpDesc>
 8007ad4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2210      	movs	r2, #16
 8007ae0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af0:	711a      	strb	r2, [r3, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d006      	beq.n	8007b0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b04:	711a      	strb	r2, [r3, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2243      	movs	r2, #67	; 0x43
 8007b0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b10:	4b02      	ldr	r3, [pc, #8]	; (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000050 	.word	0x20000050

08007b20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b28:	2182      	movs	r1, #130	; 0x82
 8007b2a:	4818      	ldr	r0, [pc, #96]	; (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b2c:	f000 fcd7 	bl	80084de <USBD_GetEpDesc>
 8007b30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b32:	2101      	movs	r1, #1
 8007b34:	4815      	ldr	r0, [pc, #84]	; (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b36:	f000 fcd2 	bl	80084de <USBD_GetEpDesc>
 8007b3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b3c:	2181      	movs	r1, #129	; 0x81
 8007b3e:	4813      	ldr	r0, [pc, #76]	; (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b40:	f000 fccd 	bl	80084de <USBD_GetEpDesc>
 8007b44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d006      	beq.n	8007b66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	711a      	strb	r2, [r3, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f042 0202 	orr.w	r2, r2, #2
 8007b64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d006      	beq.n	8007b7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	711a      	strb	r2, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f042 0202 	orr.w	r2, r2, #2
 8007b78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2243      	movs	r2, #67	; 0x43
 8007b7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b80:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000050 	.word	0x20000050

08007b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b98:	2182      	movs	r1, #130	; 0x82
 8007b9a:	4818      	ldr	r0, [pc, #96]	; (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b9c:	f000 fc9f 	bl	80084de <USBD_GetEpDesc>
 8007ba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4815      	ldr	r0, [pc, #84]	; (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ba6:	f000 fc9a 	bl	80084de <USBD_GetEpDesc>
 8007baa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bac:	2181      	movs	r1, #129	; 0x81
 8007bae:	4813      	ldr	r0, [pc, #76]	; (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bb0:	f000 fc95 	bl	80084de <USBD_GetEpDesc>
 8007bb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2210      	movs	r2, #16
 8007bc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d006      	beq.n	8007bd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd0:	711a      	strb	r2, [r3, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be4:	711a      	strb	r2, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2243      	movs	r2, #67	; 0x43
 8007bee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007bf0:	4b02      	ldr	r3, [pc, #8]	; (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000050 	.word	0x20000050

08007c00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	220a      	movs	r2, #10
 8007c0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	2000000c 	.word	0x2000000c

08007c20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e009      	b.n	8007c48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	33b0      	adds	r3, #176	; 0xb0
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	32b0      	adds	r2, #176	; 0xb0
 8007c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e008      	b.n	8007c8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	32b0      	adds	r2, #176	; 0xb0
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e004      	b.n	8007cc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32b0      	adds	r2, #176	; 0xb0
 8007ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32b0      	adds	r2, #176	; 0xb0
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e018      	b.n	8007d34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7c1b      	ldrb	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <USBD_CDC_ReceivePacket+0x68>)
 8007d0c:	7819      	ldrb	r1, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 ff7b 	bl	8009c14 <USBD_LL_PrepareReceive>
 8007d1e:	e008      	b.n	8007d32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d20:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <USBD_CDC_ReceivePacket+0x68>)
 8007d22:	7819      	ldrb	r1, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d2a:	2340      	movs	r3, #64	; 0x40
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 ff71 	bl	8009c14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20000094 	.word	0x20000094

08007d40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e01f      	b.n	8007d98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	79fa      	ldrb	r2, [r7, #7]
 8007d8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f001 fdeb 	bl	8009968 <USBD_LL_Init>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e025      	b.n	8007e04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	32ae      	adds	r2, #174	; 0xae
 8007dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00f      	beq.n	8007df4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	32ae      	adds	r2, #174	; 0xae
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	f107 020e 	add.w	r2, r7, #14
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	4602      	mov	r2, r0
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 fdf3 	bl	8009a00 <USBD_LL_Start>
 8007e1a:	4603      	mov	r3, r0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 f90e 	bl	80090da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ecc:	461a      	mov	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d01a      	beq.n	8007f18 <USBD_LL_SetupStage+0x72>
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d822      	bhi.n	8007f2c <USBD_LL_SetupStage+0x86>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <USBD_LL_SetupStage+0x4a>
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d00a      	beq.n	8007f04 <USBD_LL_SetupStage+0x5e>
 8007eee:	e01d      	b.n	8007f2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb65 	bl	80085c8 <USBD_StdDevReq>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
      break;
 8007f02:	e020      	b.n	8007f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fbcd 	bl	80086ac <USBD_StdItfReq>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]
      break;
 8007f16:	e016      	b.n	8007f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc2f 	bl	8008784 <USBD_StdEPReq>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2a:	e00c      	b.n	8007f46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fdc0 	bl	8009ac0 <USBD_LL_StallEP>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
      break;
 8007f44:	bf00      	nop
  }

  return ret;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d16e      	bne.n	8008046 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	f040 8098 	bne.w	80080ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d913      	bls.n	8007fb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	bf28      	it	cs
 8007fa2:	4613      	movcs	r3, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f001 f98a 	bl	80092c2 <USBD_CtlContinueRx>
 8007fae:	e07d      	b.n	80080ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d014      	beq.n	8007fe8 <USBD_LL_DataOutStage+0x98>
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d81d      	bhi.n	8007ffe <USBD_LL_DataOutStage+0xae>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <USBD_LL_DataOutStage+0x7c>
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d003      	beq.n	8007fd2 <USBD_LL_DataOutStage+0x82>
 8007fca:	e018      	b.n	8007ffe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75bb      	strb	r3, [r7, #22]
            break;
 8007fd0:	e018      	b.n	8008004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fa64 	bl	80084aa <USBD_CoreFindIF>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75bb      	strb	r3, [r7, #22]
            break;
 8007fe6:	e00d      	b.n	8008004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fa66 	bl	80084c4 <USBD_CoreFindEP>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8007ffc:	e002      	b.n	8008004 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75bb      	strb	r3, [r7, #22]
            break;
 8008002:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008004:	7dbb      	ldrb	r3, [r7, #22]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d119      	bne.n	800803e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b03      	cmp	r3, #3
 8008014:	d113      	bne.n	800803e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008016:	7dba      	ldrb	r2, [r7, #22]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	32ae      	adds	r2, #174	; 0xae
 800801c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008026:	7dba      	ldrb	r2, [r7, #22]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800802e:	7dba      	ldrb	r2, [r7, #22]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	32ae      	adds	r2, #174	; 0xae
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 f950 	bl	80092e4 <USBD_CtlSendStatus>
 8008044:	e032      	b.n	80080ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800804c:	b2db      	uxtb	r3, r3
 800804e:	4619      	mov	r1, r3
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fa37 	bl	80084c4 <USBD_CoreFindEP>
 8008056:	4603      	mov	r3, r0
 8008058:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800805a:	7dbb      	ldrb	r3, [r7, #22]
 800805c:	2bff      	cmp	r3, #255	; 0xff
 800805e:	d025      	beq.n	80080ac <USBD_LL_DataOutStage+0x15c>
 8008060:	7dbb      	ldrb	r3, [r7, #22]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d122      	bne.n	80080ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d117      	bne.n	80080a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008072:	7dba      	ldrb	r2, [r7, #22]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	32ae      	adds	r2, #174	; 0xae
 8008078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008082:	7dba      	ldrb	r2, [r7, #22]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800808a:	7dba      	ldrb	r2, [r7, #22]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	32ae      	adds	r2, #174	; 0xae
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	7afa      	ldrb	r2, [r7, #11]
 8008098:	4611      	mov	r1, r2
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	4798      	blx	r3
 800809e:	4603      	mov	r3, r0
 80080a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	e000      	b.n	80080ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	460b      	mov	r3, r1
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80080c4:	7afb      	ldrb	r3, [r7, #11]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d16f      	bne.n	80081aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3314      	adds	r3, #20
 80080ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d15a      	bne.n	8008190 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d914      	bls.n	8008110 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	461a      	mov	r2, r3
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f001 f8b2 	bl	8009266 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008102:	2300      	movs	r3, #0
 8008104:	2200      	movs	r2, #0
 8008106:	2100      	movs	r1, #0
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f001 fd83 	bl	8009c14 <USBD_LL_PrepareReceive>
 800810e:	e03f      	b.n	8008190 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	d11c      	bne.n	8008156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008124:	429a      	cmp	r2, r3
 8008126:	d316      	bcc.n	8008156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008132:	429a      	cmp	r2, r3
 8008134:	d20f      	bcs.n	8008156 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f001 f893 	bl	8009266 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008148:	2300      	movs	r3, #0
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f001 fd60 	bl	8009c14 <USBD_LL_PrepareReceive>
 8008154:	e01c      	b.n	8008190 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d10f      	bne.n	8008182 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008182:	2180      	movs	r1, #128	; 0x80
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f001 fc9b 	bl	8009ac0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f001 f8bd 	bl	800930a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d03a      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fe42 	bl	8007e24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081a8:	e032      	b.n	8008210 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	4619      	mov	r1, r3
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f985 	bl	80084c4 <USBD_CoreFindEP>
 80081ba:	4603      	mov	r3, r0
 80081bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2bff      	cmp	r3, #255	; 0xff
 80081c2:	d025      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d122      	bne.n	8008210 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d11c      	bne.n	8008210 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081d6:	7dfa      	ldrb	r2, [r7, #23]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	32ae      	adds	r2, #174	; 0xae
 80081dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d014      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081e6:	7dfa      	ldrb	r2, [r7, #23]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081ee:	7dfa      	ldrb	r2, [r7, #23]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	32ae      	adds	r2, #174	; 0xae
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	7afa      	ldrb	r2, [r7, #11]
 80081fc:	4611      	mov	r1, r2
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	4798      	blx	r3
 8008202:	4603      	mov	r3, r0
 8008204:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008206:	7dbb      	ldrb	r3, [r7, #22]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800820c:	7dbb      	ldrb	r3, [r7, #22]
 800820e:	e000      	b.n	8008212 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d014      	beq.n	8008280 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00e      	beq.n	8008280 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6852      	ldr	r2, [r2, #4]
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	4611      	mov	r1, r2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008280:	2340      	movs	r3, #64	; 0x40
 8008282:	2200      	movs	r2, #0
 8008284:	2100      	movs	r1, #0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fbd5 	bl	8009a36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2240      	movs	r2, #64	; 0x40
 8008298:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800829c:	2340      	movs	r3, #64	; 0x40
 800829e:	2200      	movs	r2, #0
 80082a0:	2180      	movs	r1, #128	; 0x80
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fbc7 	bl	8009a36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2240      	movs	r2, #64	; 0x40
 80082b2:	621a      	str	r2, [r3, #32]

  return ret;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d006      	beq.n	8008300 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2204      	movs	r2, #4
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b04      	cmp	r3, #4
 8008328:	d106      	bne.n	8008338 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b03      	cmp	r3, #3
 8008358:	d110      	bne.n	800837c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	32ae      	adds	r2, #174	; 0xae
 800839c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e01c      	b.n	80083e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d115      	bne.n	80083e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	32ae      	adds	r2, #174	; 0xae
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	32ae      	adds	r2, #174	; 0xae
 80083d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	4611      	mov	r1, r2
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	32ae      	adds	r2, #174	; 0xae
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e01c      	b.n	8008446 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b03      	cmp	r3, #3
 8008416:	d115      	bne.n	8008444 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	32ae      	adds	r2, #174	; 0xae
 8008422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32ae      	adds	r2, #174	; 0xae
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4611      	mov	r1, r2
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00e      	beq.n	80084a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6852      	ldr	r2, [r2, #4]
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	4611      	mov	r1, r2
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800849c:	2303      	movs	r3, #3
 800849e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	429a      	cmp	r2, r3
 8008504:	d920      	bls.n	8008548 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800850e:	e013      	b.n	8008538 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008510:	f107 030a 	add.w	r3, r7, #10
 8008514:	4619      	mov	r1, r3
 8008516:	6978      	ldr	r0, [r7, #20]
 8008518:	f000 f81b 	bl	8008552 <USBD_GetNextDesc>
 800851c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	2b05      	cmp	r3, #5
 8008524:	d108      	bne.n	8008538 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	789b      	ldrb	r3, [r3, #2]
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	429a      	cmp	r2, r3
 8008532:	d008      	beq.n	8008546 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	885b      	ldrh	r3, [r3, #2]
 800853c:	b29a      	uxth	r2, r3
 800853e:	897b      	ldrh	r3, [r7, #10]
 8008540:	429a      	cmp	r2, r3
 8008542:	d8e5      	bhi.n	8008510 <USBD_GetEpDesc+0x32>
 8008544:	e000      	b.n	8008548 <USBD_GetEpDesc+0x6a>
          break;
 8008546:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008548:	693b      	ldr	r3, [r7, #16]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008552:	b480      	push	{r7}
 8008554:	b085      	sub	sp, #20
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	881a      	ldrh	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	4413      	add	r3, r2
 800856c:	b29a      	uxth	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4413      	add	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800857e:	68fb      	ldr	r3, [r7, #12]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	3301      	adds	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085aa:	8a3b      	ldrh	r3, [r7, #16]
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	b21a      	sxth	r2, r3
 80085b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	b21b      	sxth	r3, r3
 80085b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085ba:	89fb      	ldrh	r3, [r7, #14]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	371c      	adds	r7, #28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085de:	2b40      	cmp	r3, #64	; 0x40
 80085e0:	d005      	beq.n	80085ee <USBD_StdDevReq+0x26>
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d857      	bhi.n	8008696 <USBD_StdDevReq+0xce>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00f      	beq.n	800860a <USBD_StdDevReq+0x42>
 80085ea:	2b20      	cmp	r3, #32
 80085ec:	d153      	bne.n	8008696 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	32ae      	adds	r2, #174	; 0xae
 80085f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	4798      	blx	r3
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
      break;
 8008608:	e04a      	b.n	80086a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b09      	cmp	r3, #9
 8008610:	d83b      	bhi.n	800868a <USBD_StdDevReq+0xc2>
 8008612:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <USBD_StdDevReq+0x50>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	0800866d 	.word	0x0800866d
 800861c:	08008681 	.word	0x08008681
 8008620:	0800868b 	.word	0x0800868b
 8008624:	08008677 	.word	0x08008677
 8008628:	0800868b 	.word	0x0800868b
 800862c:	0800864b 	.word	0x0800864b
 8008630:	08008641 	.word	0x08008641
 8008634:	0800868b 	.word	0x0800868b
 8008638:	08008663 	.word	0x08008663
 800863c:	08008655 	.word	0x08008655
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa3c 	bl	8008ac0 <USBD_GetDescriptor>
          break;
 8008648:	e024      	b.n	8008694 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fba1 	bl	8008d94 <USBD_SetAddress>
          break;
 8008652:	e01f      	b.n	8008694 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fbe0 	bl	8008e1c <USBD_SetConfig>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
          break;
 8008660:	e018      	b.n	8008694 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc83 	bl	8008f70 <USBD_GetConfig>
          break;
 800866a:	e013      	b.n	8008694 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fcb4 	bl	8008fdc <USBD_GetStatus>
          break;
 8008674:	e00e      	b.n	8008694 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fce3 	bl	8009044 <USBD_SetFeature>
          break;
 800867e:	e009      	b.n	8008694 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fd07 	bl	8009096 <USBD_ClrFeature>
          break;
 8008688:	e004      	b.n	8008694 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fd5e 	bl	800914e <USBD_CtlError>
          break;
 8008692:	bf00      	nop
      }
      break;
 8008694:	e004      	b.n	80086a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fd58 	bl	800914e <USBD_CtlError>
      break;
 800869e:	bf00      	nop
  }

  return ret;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop

080086ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c2:	2b40      	cmp	r3, #64	; 0x40
 80086c4:	d005      	beq.n	80086d2 <USBD_StdItfReq+0x26>
 80086c6:	2b40      	cmp	r3, #64	; 0x40
 80086c8:	d852      	bhi.n	8008770 <USBD_StdItfReq+0xc4>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <USBD_StdItfReq+0x26>
 80086ce:	2b20      	cmp	r3, #32
 80086d0:	d14e      	bne.n	8008770 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d840      	bhi.n	8008762 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	889b      	ldrh	r3, [r3, #4]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d836      	bhi.n	8008758 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	889b      	ldrh	r3, [r3, #4]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fed9 	bl	80084aa <USBD_CoreFindIF>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2bff      	cmp	r3, #255	; 0xff
 8008700:	d01d      	beq.n	800873e <USBD_StdItfReq+0x92>
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11a      	bne.n	800873e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008708:	7bba      	ldrb	r2, [r7, #14]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	32ae      	adds	r2, #174	; 0xae
 800870e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00f      	beq.n	8008738 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008718:	7bba      	ldrb	r2, [r7, #14]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008720:	7bba      	ldrb	r2, [r7, #14]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	32ae      	adds	r2, #174	; 0xae
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	4798      	blx	r3
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008736:	e004      	b.n	8008742 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800873c:	e001      	b.n	8008742 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	88db      	ldrh	r3, [r3, #6]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d110      	bne.n	800876c <USBD_StdItfReq+0xc0>
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10d      	bne.n	800876c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fdc7 	bl	80092e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008756:	e009      	b.n	800876c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fcf7 	bl	800914e <USBD_CtlError>
          break;
 8008760:	e004      	b.n	800876c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fcf2 	bl	800914e <USBD_CtlError>
          break;
 800876a:	e000      	b.n	800876e <USBD_StdItfReq+0xc2>
          break;
 800876c:	bf00      	nop
      }
      break;
 800876e:	e004      	b.n	800877a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fceb 	bl	800914e <USBD_CtlError>
      break;
 8008778:	bf00      	nop
  }

  return ret;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	889b      	ldrh	r3, [r3, #4]
 8008796:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a0:	2b40      	cmp	r3, #64	; 0x40
 80087a2:	d007      	beq.n	80087b4 <USBD_StdEPReq+0x30>
 80087a4:	2b40      	cmp	r3, #64	; 0x40
 80087a6:	f200 817f 	bhi.w	8008aa8 <USBD_StdEPReq+0x324>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d02a      	beq.n	8008804 <USBD_StdEPReq+0x80>
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	f040 817a 	bne.w	8008aa8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff fe83 	bl	80084c4 <USBD_CoreFindEP>
 80087be:	4603      	mov	r3, r0
 80087c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087c2:	7b7b      	ldrb	r3, [r7, #13]
 80087c4:	2bff      	cmp	r3, #255	; 0xff
 80087c6:	f000 8174 	beq.w	8008ab2 <USBD_StdEPReq+0x32e>
 80087ca:	7b7b      	ldrb	r3, [r7, #13]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f040 8170 	bne.w	8008ab2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80087d2:	7b7a      	ldrb	r2, [r7, #13]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087da:	7b7a      	ldrb	r2, [r7, #13]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	32ae      	adds	r2, #174	; 0xae
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 8163 	beq.w	8008ab2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087ec:	7b7a      	ldrb	r2, [r7, #13]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	32ae      	adds	r2, #174	; 0xae
 80087f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008802:	e156      	b.n	8008ab2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	2b03      	cmp	r3, #3
 800880a:	d008      	beq.n	800881e <USBD_StdEPReq+0x9a>
 800880c:	2b03      	cmp	r3, #3
 800880e:	f300 8145 	bgt.w	8008a9c <USBD_StdEPReq+0x318>
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 809b 	beq.w	800894e <USBD_StdEPReq+0x1ca>
 8008818:	2b01      	cmp	r3, #1
 800881a:	d03c      	beq.n	8008896 <USBD_StdEPReq+0x112>
 800881c:	e13e      	b.n	8008a9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d002      	beq.n	8008830 <USBD_StdEPReq+0xac>
 800882a:	2b03      	cmp	r3, #3
 800882c:	d016      	beq.n	800885c <USBD_StdEPReq+0xd8>
 800882e:	e02c      	b.n	800888a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00d      	beq.n	8008852 <USBD_StdEPReq+0xce>
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b80      	cmp	r3, #128	; 0x80
 800883a:	d00a      	beq.n	8008852 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f93d 	bl	8009ac0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008846:	2180      	movs	r1, #128	; 0x80
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 f939 	bl	8009ac0 <USBD_LL_StallEP>
 800884e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008850:	e020      	b.n	8008894 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fc7a 	bl	800914e <USBD_CtlError>
              break;
 800885a:	e01b      	b.n	8008894 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	885b      	ldrh	r3, [r3, #2]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10e      	bne.n	8008882 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00b      	beq.n	8008882 <USBD_StdEPReq+0xfe>
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b80      	cmp	r3, #128	; 0x80
 800886e:	d008      	beq.n	8008882 <USBD_StdEPReq+0xfe>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	88db      	ldrh	r3, [r3, #6]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d104      	bne.n	8008882 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 f91f 	bl	8009ac0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fd2e 	bl	80092e4 <USBD_CtlSendStatus>

              break;
 8008888:	e004      	b.n	8008894 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fc5e 	bl	800914e <USBD_CtlError>
              break;
 8008892:	bf00      	nop
          }
          break;
 8008894:	e107      	b.n	8008aa6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d002      	beq.n	80088a8 <USBD_StdEPReq+0x124>
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d016      	beq.n	80088d4 <USBD_StdEPReq+0x150>
 80088a6:	e04b      	b.n	8008940 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00d      	beq.n	80088ca <USBD_StdEPReq+0x146>
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	2b80      	cmp	r3, #128	; 0x80
 80088b2:	d00a      	beq.n	80088ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 f901 	bl	8009ac0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088be:	2180      	movs	r1, #128	; 0x80
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 f8fd 	bl	8009ac0 <USBD_LL_StallEP>
 80088c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088c8:	e040      	b.n	800894c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fc3e 	bl	800914e <USBD_CtlError>
              break;
 80088d2:	e03b      	b.n	800894c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d136      	bne.n	800894a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 f907 	bl	8009afe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fcf7 	bl	80092e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7ff fde2 	bl	80084c4 <USBD_CoreFindEP>
 8008900:	4603      	mov	r3, r0
 8008902:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008904:	7b7b      	ldrb	r3, [r7, #13]
 8008906:	2bff      	cmp	r3, #255	; 0xff
 8008908:	d01f      	beq.n	800894a <USBD_StdEPReq+0x1c6>
 800890a:	7b7b      	ldrb	r3, [r7, #13]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d11c      	bne.n	800894a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008910:	7b7a      	ldrb	r2, [r7, #13]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008918:	7b7a      	ldrb	r2, [r7, #13]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	32ae      	adds	r2, #174	; 0xae
 800891e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d010      	beq.n	800894a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008928:	7b7a      	ldrb	r2, [r7, #13]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	32ae      	adds	r2, #174	; 0xae
 800892e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800893e:	e004      	b.n	800894a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fc03 	bl	800914e <USBD_CtlError>
              break;
 8008948:	e000      	b.n	800894c <USBD_StdEPReq+0x1c8>
              break;
 800894a:	bf00      	nop
          }
          break;
 800894c:	e0ab      	b.n	8008aa6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <USBD_StdEPReq+0x1dc>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d032      	beq.n	80089c4 <USBD_StdEPReq+0x240>
 800895e:	e097      	b.n	8008a90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d007      	beq.n	8008976 <USBD_StdEPReq+0x1f2>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d004      	beq.n	8008976 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fbed 	bl	800914e <USBD_CtlError>
                break;
 8008974:	e091      	b.n	8008a9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800897a:	2b00      	cmp	r3, #0
 800897c:	da0b      	bge.n	8008996 <USBD_StdEPReq+0x212>
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	3310      	adds	r3, #16
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	3304      	adds	r3, #4
 8008994:	e00b      	b.n	80089ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2202      	movs	r2, #2
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fc37 	bl	8009230 <USBD_CtlSendData>
              break;
 80089c2:	e06a      	b.n	8008a9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	da11      	bge.n	80089f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	f003 020f 	and.w	r2, r3, #15
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	440b      	add	r3, r1
 80089de:	3324      	adds	r3, #36	; 0x24
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d117      	bne.n	8008a16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbb0 	bl	800914e <USBD_CtlError>
                  break;
 80089ee:	e054      	b.n	8008a9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	f003 020f 	and.w	r2, r3, #15
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fb9d 	bl	800914e <USBD_CtlError>
                  break;
 8008a14:	e041      	b.n	8008a9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da0b      	bge.n	8008a36 <USBD_StdEPReq+0x2b2>
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	3310      	adds	r3, #16
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	4413      	add	r3, r2
 8008a32:	3304      	adds	r3, #4
 8008a34:	e00b      	b.n	8008a4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <USBD_StdEPReq+0x2d8>
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b80      	cmp	r3, #128	; 0x80
 8008a5a:	d103      	bne.n	8008a64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	e00e      	b.n	8008a82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f867 	bl	8009b3c <USBD_LL_IsStallEP>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	e002      	b.n	8008a82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2202      	movs	r2, #2
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fbd1 	bl	8009230 <USBD_CtlSendData>
              break;
 8008a8e:	e004      	b.n	8008a9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fb5b 	bl	800914e <USBD_CtlError>
              break;
 8008a98:	bf00      	nop
          }
          break;
 8008a9a:	e004      	b.n	8008aa6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fb55 	bl	800914e <USBD_CtlError>
          break;
 8008aa4:	bf00      	nop
      }
      break;
 8008aa6:	e005      	b.n	8008ab4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fb4f 	bl	800914e <USBD_CtlError>
      break;
 8008ab0:	e000      	b.n	8008ab4 <USBD_StdEPReq+0x330>
      break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	0a1b      	lsrs	r3, r3, #8
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	2b06      	cmp	r3, #6
 8008ae2:	f200 8128 	bhi.w	8008d36 <USBD_GetDescriptor+0x276>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <USBD_GetDescriptor+0x2c>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b09 	.word	0x08008b09
 8008af0:	08008b21 	.word	0x08008b21
 8008af4:	08008b61 	.word	0x08008b61
 8008af8:	08008d37 	.word	0x08008d37
 8008afc:	08008d37 	.word	0x08008d37
 8008b00:	08008cd7 	.word	0x08008cd7
 8008b04:	08008d03 	.word	0x08008d03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	7c12      	ldrb	r2, [r2, #16]
 8008b14:	f107 0108 	add.w	r1, r7, #8
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4798      	blx	r3
 8008b1c:	60f8      	str	r0, [r7, #12]
      break;
 8008b1e:	e112      	b.n	8008d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	7c1b      	ldrb	r3, [r3, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10d      	bne.n	8008b44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	f107 0208 	add.w	r2, r7, #8
 8008b34:	4610      	mov	r0, r2
 8008b36:	4798      	blx	r3
 8008b38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	2202      	movs	r2, #2
 8008b40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b42:	e100      	b.n	8008d46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	f107 0208 	add.w	r2, r7, #8
 8008b50:	4610      	mov	r0, r2
 8008b52:	4798      	blx	r3
 8008b54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	701a      	strb	r2, [r3, #0]
      break;
 8008b5e:	e0f2      	b.n	8008d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	885b      	ldrh	r3, [r3, #2]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b05      	cmp	r3, #5
 8008b68:	f200 80ac 	bhi.w	8008cc4 <USBD_GetDescriptor+0x204>
 8008b6c:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <USBD_GetDescriptor+0xb4>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008b8d 	.word	0x08008b8d
 8008b78:	08008bc1 	.word	0x08008bc1
 8008b7c:	08008bf5 	.word	0x08008bf5
 8008b80:	08008c29 	.word	0x08008c29
 8008b84:	08008c5d 	.word	0x08008c5d
 8008b88:	08008c91 	.word	0x08008c91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bae:	e091      	b.n	8008cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 facb 	bl	800914e <USBD_CtlError>
            err++;
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bbe:	e089      	b.n	8008cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be2:	e077      	b.n	8008cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fab1 	bl	800914e <USBD_CtlError>
            err++;
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf2:	e06f      	b.n	8008cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	7c12      	ldrb	r2, [r2, #16]
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c16:	e05d      	b.n	8008cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa97 	bl	800914e <USBD_CtlError>
            err++;
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	3301      	adds	r3, #1
 8008c24:	72fb      	strb	r3, [r7, #11]
          break;
 8008c26:	e055      	b.n	8008cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7c12      	ldrb	r2, [r2, #16]
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4a:	e043      	b.n	8008cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fa7d 	bl	800914e <USBD_CtlError>
            err++;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5a:	e03b      	b.n	8008cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	7c12      	ldrb	r2, [r2, #16]
 8008c74:	f107 0108 	add.w	r1, r7, #8
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4798      	blx	r3
 8008c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7e:	e029      	b.n	8008cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa63 	bl	800914e <USBD_CtlError>
            err++;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8e:	e021      	b.n	8008cd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	7c12      	ldrb	r2, [r2, #16]
 8008ca8:	f107 0108 	add.w	r1, r7, #8
 8008cac:	4610      	mov	r0, r2
 8008cae:	4798      	blx	r3
 8008cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cb2:	e00f      	b.n	8008cd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa49 	bl	800914e <USBD_CtlError>
            err++;
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cc2:	e007      	b.n	8008cd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa41 	bl	800914e <USBD_CtlError>
          err++;
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008cd2:	bf00      	nop
      }
      break;
 8008cd4:	e037      	b.n	8008d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7c1b      	ldrb	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d109      	bne.n	8008cf2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	f107 0208 	add.w	r2, r7, #8
 8008cea:	4610      	mov	r0, r2
 8008cec:	4798      	blx	r3
 8008cee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf0:	e029      	b.n	8008d46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa2a 	bl	800914e <USBD_CtlError>
        err++;
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008d00:	e021      	b.n	8008d46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	7c1b      	ldrb	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10d      	bne.n	8008d26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	f107 0208 	add.w	r2, r7, #8
 8008d16:	4610      	mov	r0, r2
 8008d18:	4798      	blx	r3
 8008d1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	2207      	movs	r2, #7
 8008d22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d24:	e00f      	b.n	8008d46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fa10 	bl	800914e <USBD_CtlError>
        err++;
 8008d2e:	7afb      	ldrb	r3, [r7, #11]
 8008d30:	3301      	adds	r3, #1
 8008d32:	72fb      	strb	r3, [r7, #11]
      break;
 8008d34:	e007      	b.n	8008d46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fa08 	bl	800914e <USBD_CtlError>
      err++;
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	3301      	adds	r3, #1
 8008d42:	72fb      	strb	r3, [r7, #11]
      break;
 8008d44:	bf00      	nop
  }

  if (err != 0U)
 8008d46:	7afb      	ldrb	r3, [r7, #11]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d11e      	bne.n	8008d8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	88db      	ldrh	r3, [r3, #6]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d016      	beq.n	8008d82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d54:	893b      	ldrh	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00e      	beq.n	8008d78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88da      	ldrh	r2, [r3, #6]
 8008d5e:	893b      	ldrh	r3, [r7, #8]
 8008d60:	4293      	cmp	r3, r2
 8008d62:	bf28      	it	cs
 8008d64:	4613      	movcs	r3, r2
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d6a:	893b      	ldrh	r3, [r7, #8]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68f9      	ldr	r1, [r7, #12]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fa5d 	bl	8009230 <USBD_CtlSendData>
 8008d76:	e009      	b.n	8008d8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f9e7 	bl	800914e <USBD_CtlError>
 8008d80:	e004      	b.n	8008d8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 faae 	bl	80092e4 <USBD_CtlSendStatus>
 8008d88:	e000      	b.n	8008d8c <USBD_GetDescriptor+0x2cc>
    return;
 8008d8a:	bf00      	nop
  }
}
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop

08008d94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	889b      	ldrh	r3, [r3, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d131      	bne.n	8008e0a <USBD_SetAddress+0x76>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	88db      	ldrh	r3, [r3, #6]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d12d      	bne.n	8008e0a <USBD_SetAddress+0x76>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	885b      	ldrh	r3, [r3, #2]
 8008db2:	2b7f      	cmp	r3, #127	; 0x7f
 8008db4:	d829      	bhi.n	8008e0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d104      	bne.n	8008dd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f9bc 	bl	800914e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	e01d      	b.n	8008e14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7bfa      	ldrb	r2, [r7, #15]
 8008ddc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fed5 	bl	8009b94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa7a 	bl	80092e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dfe:	e009      	b.n	8008e14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e08:	e004      	b.n	8008e14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f99e 	bl	800914e <USBD_CtlError>
  }
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	4b4e      	ldr	r3, [pc, #312]	; (8008f6c <USBD_SetConfig+0x150>)
 8008e32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e34:	4b4d      	ldr	r3, [pc, #308]	; (8008f6c <USBD_SetConfig+0x150>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d905      	bls.n	8008e48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f985 	bl	800914e <USBD_CtlError>
    return USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e08c      	b.n	8008f62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d002      	beq.n	8008e5a <USBD_SetConfig+0x3e>
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d029      	beq.n	8008eac <USBD_SetConfig+0x90>
 8008e58:	e075      	b.n	8008f46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e5a:	4b44      	ldr	r3, [pc, #272]	; (8008f6c <USBD_SetConfig+0x150>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d020      	beq.n	8008ea4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e62:	4b42      	ldr	r3, [pc, #264]	; (8008f6c <USBD_SetConfig+0x150>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e6c:	4b3f      	ldr	r3, [pc, #252]	; (8008f6c <USBD_SetConfig+0x150>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7fe ffe1 	bl	8007e3a <USBD_SetClassConfig>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d008      	beq.n	8008e94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f962 	bl	800914e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e92:	e065      	b.n	8008f60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fa25 	bl	80092e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ea2:	e05d      	b.n	8008f60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fa1d 	bl	80092e4 <USBD_CtlSendStatus>
      break;
 8008eaa:	e059      	b.n	8008f60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008eac:	4b2f      	ldr	r3, [pc, #188]	; (8008f6c <USBD_SetConfig+0x150>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d112      	bne.n	8008eda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ebc:	4b2b      	ldr	r3, [pc, #172]	; (8008f6c <USBD_SetConfig+0x150>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ec6:	4b29      	ldr	r3, [pc, #164]	; (8008f6c <USBD_SetConfig+0x150>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fe ffd0 	bl	8007e72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa06 	bl	80092e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ed8:	e042      	b.n	8008f60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008eda:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <USBD_SetConfig+0x150>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d02a      	beq.n	8008f3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7fe ffbe 	bl	8007e72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ef6:	4b1d      	ldr	r3, [pc, #116]	; (8008f6c <USBD_SetConfig+0x150>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f00:	4b1a      	ldr	r3, [pc, #104]	; (8008f6c <USBD_SetConfig+0x150>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7fe ff97 	bl	8007e3a <USBD_SetClassConfig>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00f      	beq.n	8008f36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f918 	bl	800914e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7fe ffa3 	bl	8007e72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f34:	e014      	b.n	8008f60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9d4 	bl	80092e4 <USBD_CtlSendStatus>
      break;
 8008f3c:	e010      	b.n	8008f60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f9d0 	bl	80092e4 <USBD_CtlSendStatus>
      break;
 8008f44:	e00c      	b.n	8008f60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f900 	bl	800914e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f4e:	4b07      	ldr	r3, [pc, #28]	; (8008f6c <USBD_SetConfig+0x150>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7fe ff8c 	bl	8007e72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5e:	bf00      	nop
  }

  return ret;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000190 	.word	0x20000190

08008f70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	88db      	ldrh	r3, [r3, #6]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d004      	beq.n	8008f8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f8e2 	bl	800914e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f8a:	e023      	b.n	8008fd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	dc02      	bgt.n	8008f9e <USBD_GetConfig+0x2e>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dc03      	bgt.n	8008fa4 <USBD_GetConfig+0x34>
 8008f9c:	e015      	b.n	8008fca <USBD_GetConfig+0x5a>
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d00b      	beq.n	8008fba <USBD_GetConfig+0x4a>
 8008fa2:	e012      	b.n	8008fca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3308      	adds	r3, #8
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f93c 	bl	8009230 <USBD_CtlSendData>
        break;
 8008fb8:	e00c      	b.n	8008fd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f934 	bl	8009230 <USBD_CtlSendData>
        break;
 8008fc8:	e004      	b.n	8008fd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f8be 	bl	800914e <USBD_CtlError>
        break;
 8008fd2:	bf00      	nop
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d81e      	bhi.n	8009032 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	88db      	ldrh	r3, [r3, #6]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d004      	beq.n	8009006 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8a5 	bl	800914e <USBD_CtlError>
        break;
 8009004:	e01a      	b.n	800903c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f043 0202 	orr.w	r2, r3, #2
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	330c      	adds	r3, #12
 8009026:	2202      	movs	r2, #2
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f900 	bl	8009230 <USBD_CtlSendData>
      break;
 8009030:	e004      	b.n	800903c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f88a 	bl	800914e <USBD_CtlError>
      break;
 800903a:	bf00      	nop
  }
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	885b      	ldrh	r3, [r3, #2]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d107      	bne.n	8009066 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f940 	bl	80092e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009064:	e013      	b.n	800908e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	2b02      	cmp	r3, #2
 800906c:	d10b      	bne.n	8009086 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	889b      	ldrh	r3, [r3, #4]
 8009072:	0a1b      	lsrs	r3, r3, #8
 8009074:	b29b      	uxth	r3, r3
 8009076:	b2da      	uxtb	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f930 	bl	80092e4 <USBD_CtlSendStatus>
}
 8009084:	e003      	b.n	800908e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f860 	bl	800914e <USBD_CtlError>
}
 800908e:	bf00      	nop
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	3b01      	subs	r3, #1
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d80b      	bhi.n	80090c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d10c      	bne.n	80090d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f910 	bl	80092e4 <USBD_CtlSendStatus>
      }
      break;
 80090c4:	e004      	b.n	80090d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f840 	bl	800914e <USBD_CtlError>
      break;
 80090ce:	e000      	b.n	80090d2 <USBD_ClrFeature+0x3c>
      break;
 80090d0:	bf00      	nop
  }
}
 80090d2:	bf00      	nop
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	781a      	ldrb	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3301      	adds	r3, #1
 80090f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	781a      	ldrb	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff fa41 	bl	800858c <SWAPBYTE>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3301      	adds	r3, #1
 800911c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff fa34 	bl	800858c <SWAPBYTE>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3301      	adds	r3, #1
 8009130:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3301      	adds	r3, #1
 8009136:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f7ff fa27 	bl	800858c <SWAPBYTE>
 800913e:	4603      	mov	r3, r0
 8009140:	461a      	mov	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	80da      	strh	r2, [r3, #6]
}
 8009146:	bf00      	nop
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009158:	2180      	movs	r1, #128	; 0x80
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fcb0 	bl	8009ac0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fcac 	bl	8009ac0 <USBD_LL_StallEP>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d036      	beq.n	80091f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800918a:	6938      	ldr	r0, [r7, #16]
 800918c:	f000 f836 	bl	80091fc <USBD_GetLen>
 8009190:	4603      	mov	r3, r0
 8009192:	3301      	adds	r3, #1
 8009194:	b29b      	uxth	r3, r3
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	4413      	add	r3, r2
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	7812      	ldrb	r2, [r2, #0]
 80091a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	3301      	adds	r3, #1
 80091ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	4413      	add	r3, r2
 80091b6:	2203      	movs	r2, #3
 80091b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	3301      	adds	r3, #1
 80091be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091c0:	e013      	b.n	80091ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	4413      	add	r3, r2
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	3301      	adds	r3, #1
 80091d2:	613b      	str	r3, [r7, #16]
    idx++;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	3301      	adds	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	4413      	add	r3, r2
 80091e0:	2200      	movs	r2, #0
 80091e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	3301      	adds	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e7      	bne.n	80091c2 <USBD_GetString+0x52>
 80091f2:	e000      	b.n	80091f6 <USBD_GetString+0x86>
    return;
 80091f4:	bf00      	nop
  }
}
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800920c:	e005      	b.n	800921a <USBD_GetLen+0x1e>
  {
    len++;
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	3301      	adds	r3, #1
 8009212:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3301      	adds	r3, #1
 8009218:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f5      	bne.n	800920e <USBD_GetLen+0x12>
  }

  return len;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2202      	movs	r2, #2
 8009240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	2100      	movs	r1, #0
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 fcbb 	bl	8009bd2 <USBD_LL_Transmit>

  return USBD_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	2100      	movs	r1, #0
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 fcaa 	bl	8009bd2 <USBD_LL_Transmit>

  return USBD_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2203      	movs	r2, #3
 8009298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	2100      	movs	r1, #0
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 fcae 	bl	8009c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	2100      	movs	r1, #0
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 fc9d 	bl	8009c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2204      	movs	r2, #4
 80092f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092f4:	2300      	movs	r3, #0
 80092f6:	2200      	movs	r2, #0
 80092f8:	2100      	movs	r1, #0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fc69 	bl	8009bd2 <USBD_LL_Transmit>

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2205      	movs	r2, #5
 8009316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800931a:	2300      	movs	r3, #0
 800931c:	2200      	movs	r2, #0
 800931e:	2100      	movs	r1, #0
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc77 	bl	8009c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009334:	2200      	movs	r2, #0
 8009336:	4912      	ldr	r1, [pc, #72]	; (8009380 <MX_USB_DEVICE_Init+0x50>)
 8009338:	4812      	ldr	r0, [pc, #72]	; (8009384 <MX_USB_DEVICE_Init+0x54>)
 800933a:	f7fe fd01 	bl	8007d40 <USBD_Init>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009344:	f7f7 fa5c 	bl	8000800 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009348:	490f      	ldr	r1, [pc, #60]	; (8009388 <MX_USB_DEVICE_Init+0x58>)
 800934a:	480e      	ldr	r0, [pc, #56]	; (8009384 <MX_USB_DEVICE_Init+0x54>)
 800934c:	f7fe fd28 	bl	8007da0 <USBD_RegisterClass>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009356:	f7f7 fa53 	bl	8000800 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800935a:	490c      	ldr	r1, [pc, #48]	; (800938c <MX_USB_DEVICE_Init+0x5c>)
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <MX_USB_DEVICE_Init+0x54>)
 800935e:	f7fe fc5f 	bl	8007c20 <USBD_CDC_RegisterInterface>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009368:	f7f7 fa4a 	bl	8000800 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800936c:	4805      	ldr	r0, [pc, #20]	; (8009384 <MX_USB_DEVICE_Init+0x54>)
 800936e:	f7fe fd4d 	bl	8007e0c <USBD_Start>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009378:	f7f7 fa42 	bl	8000800 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800937c:	bf00      	nop
 800937e:	bd80      	pop	{r7, pc}
 8009380:	200000ac 	.word	0x200000ac
 8009384:	20000194 	.word	0x20000194
 8009388:	20000018 	.word	0x20000018
 800938c:	20000098 	.word	0x20000098

08009390 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009394:	2200      	movs	r2, #0
 8009396:	4905      	ldr	r1, [pc, #20]	; (80093ac <CDC_Init_FS+0x1c>)
 8009398:	4805      	ldr	r0, [pc, #20]	; (80093b0 <CDC_Init_FS+0x20>)
 800939a:	f7fe fc5b 	bl	8007c54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800939e:	4905      	ldr	r1, [pc, #20]	; (80093b4 <CDC_Init_FS+0x24>)
 80093a0:	4803      	ldr	r0, [pc, #12]	; (80093b0 <CDC_Init_FS+0x20>)
 80093a2:	f7fe fc79 	bl	8007c98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20000870 	.word	0x20000870
 80093b0:	20000194 	.word	0x20000194
 80093b4:	20000470 	.word	0x20000470

080093b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80093bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80093be:	4618      	mov	r0, r3
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	71fb      	strb	r3, [r7, #7]
 80093d4:	4613      	mov	r3, r2
 80093d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b23      	cmp	r3, #35	; 0x23
 80093dc:	d84a      	bhi.n	8009474 <CDC_Control_FS+0xac>
 80093de:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <CDC_Control_FS+0x1c>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	08009475 	.word	0x08009475
 80093e8:	08009475 	.word	0x08009475
 80093ec:	08009475 	.word	0x08009475
 80093f0:	08009475 	.word	0x08009475
 80093f4:	08009475 	.word	0x08009475
 80093f8:	08009475 	.word	0x08009475
 80093fc:	08009475 	.word	0x08009475
 8009400:	08009475 	.word	0x08009475
 8009404:	08009475 	.word	0x08009475
 8009408:	08009475 	.word	0x08009475
 800940c:	08009475 	.word	0x08009475
 8009410:	08009475 	.word	0x08009475
 8009414:	08009475 	.word	0x08009475
 8009418:	08009475 	.word	0x08009475
 800941c:	08009475 	.word	0x08009475
 8009420:	08009475 	.word	0x08009475
 8009424:	08009475 	.word	0x08009475
 8009428:	08009475 	.word	0x08009475
 800942c:	08009475 	.word	0x08009475
 8009430:	08009475 	.word	0x08009475
 8009434:	08009475 	.word	0x08009475
 8009438:	08009475 	.word	0x08009475
 800943c:	08009475 	.word	0x08009475
 8009440:	08009475 	.word	0x08009475
 8009444:	08009475 	.word	0x08009475
 8009448:	08009475 	.word	0x08009475
 800944c:	08009475 	.word	0x08009475
 8009450:	08009475 	.word	0x08009475
 8009454:	08009475 	.word	0x08009475
 8009458:	08009475 	.word	0x08009475
 800945c:	08009475 	.word	0x08009475
 8009460:	08009475 	.word	0x08009475
 8009464:	08009475 	.word	0x08009475
 8009468:	08009475 	.word	0x08009475
 800946c:	08009475 	.word	0x08009475
 8009470:	08009475 	.word	0x08009475
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009474:	bf00      	nop
  }

  return (USBD_OK);
 8009476:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4805      	ldr	r0, [pc, #20]	; (80094a8 <CDC_Receive_FS+0x24>)
 8009492:	f7fe fc01 	bl	8007c98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009496:	4804      	ldr	r0, [pc, #16]	; (80094a8 <CDC_Receive_FS+0x24>)
 8009498:	f7fe fc1c 	bl	8007cd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800949c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20000194 	.word	0x20000194

080094ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
	...

080094d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	6039      	str	r1, [r7, #0]
 80094da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2212      	movs	r2, #18
 80094e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094e2:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	200000c8 	.word	0x200000c8

080094f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	6039      	str	r1, [r7, #0]
 80094fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2204      	movs	r2, #4
 8009504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009506:	4b03      	ldr	r3, [pc, #12]	; (8009514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	200000dc 	.word	0x200000dc

08009518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d105      	bne.n	8009536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	4907      	ldr	r1, [pc, #28]	; (800954c <USBD_FS_ProductStrDescriptor+0x34>)
 800952e:	4808      	ldr	r0, [pc, #32]	; (8009550 <USBD_FS_ProductStrDescriptor+0x38>)
 8009530:	f7ff fe1e 	bl	8009170 <USBD_GetString>
 8009534:	e004      	b.n	8009540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	4904      	ldr	r1, [pc, #16]	; (800954c <USBD_FS_ProductStrDescriptor+0x34>)
 800953a:	4805      	ldr	r0, [pc, #20]	; (8009550 <USBD_FS_ProductStrDescriptor+0x38>)
 800953c:	f7ff fe18 	bl	8009170 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000c70 	.word	0x20000c70
 8009550:	08009e74 	.word	0x08009e74

08009554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	6039      	str	r1, [r7, #0]
 800955e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	4904      	ldr	r1, [pc, #16]	; (8009574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009564:	4804      	ldr	r0, [pc, #16]	; (8009578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009566:	f7ff fe03 	bl	8009170 <USBD_GetString>
  return USBD_StrDesc;
 800956a:	4b02      	ldr	r3, [pc, #8]	; (8009574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800956c:	4618      	mov	r0, r3
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20000c70 	.word	0x20000c70
 8009578:	08009e8c 	.word	0x08009e8c

0800957c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	6039      	str	r1, [r7, #0]
 8009586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	221a      	movs	r2, #26
 800958c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800958e:	f000 f843 	bl	8009618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009592:	4b02      	ldr	r3, [pc, #8]	; (800959c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	200000e0 	.word	0x200000e0

080095a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d105      	bne.n	80095be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	4907      	ldr	r1, [pc, #28]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095b6:	4808      	ldr	r0, [pc, #32]	; (80095d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095b8:	f7ff fdda 	bl	8009170 <USBD_GetString>
 80095bc:	e004      	b.n	80095c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4904      	ldr	r1, [pc, #16]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095c2:	4805      	ldr	r0, [pc, #20]	; (80095d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095c4:	f7ff fdd4 	bl	8009170 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c8:	4b02      	ldr	r3, [pc, #8]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000c70 	.word	0x20000c70
 80095d8:	08009ea0 	.word	0x08009ea0

080095dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	4907      	ldr	r1, [pc, #28]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095f2:	4808      	ldr	r0, [pc, #32]	; (8009614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095f4:	f7ff fdbc 	bl	8009170 <USBD_GetString>
 80095f8:	e004      	b.n	8009604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4904      	ldr	r1, [pc, #16]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095fe:	4805      	ldr	r0, [pc, #20]	; (8009614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009600:	f7ff fdb6 	bl	8009170 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000c70 	.word	0x20000c70
 8009614:	08009eac 	.word	0x08009eac

08009618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <Get_SerialNum+0x44>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009624:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <Get_SerialNum+0x48>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800962a:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <Get_SerialNum+0x4c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4413      	add	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d009      	beq.n	8009652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800963e:	2208      	movs	r2, #8
 8009640:	4909      	ldr	r1, [pc, #36]	; (8009668 <Get_SerialNum+0x50>)
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f814 	bl	8009670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009648:	2204      	movs	r2, #4
 800964a:	4908      	ldr	r1, [pc, #32]	; (800966c <Get_SerialNum+0x54>)
 800964c:	68b8      	ldr	r0, [r7, #8]
 800964e:	f000 f80f 	bl	8009670 <IntToUnicode>
  }
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	1fff7a10 	.word	0x1fff7a10
 8009660:	1fff7a14 	.word	0x1fff7a14
 8009664:	1fff7a18 	.word	0x1fff7a18
 8009668:	200000e2 	.word	0x200000e2
 800966c:	200000f2 	.word	0x200000f2

08009670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
 8009686:	e027      	b.n	80096d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	0f1b      	lsrs	r3, r3, #28
 800968c:	2b09      	cmp	r3, #9
 800968e:	d80b      	bhi.n	80096a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	0f1b      	lsrs	r3, r3, #28
 8009694:	b2da      	uxtb	r2, r3
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	4619      	mov	r1, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	440b      	add	r3, r1
 80096a0:	3230      	adds	r2, #48	; 0x30
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	e00a      	b.n	80096be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	0f1b      	lsrs	r3, r3, #28
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	4619      	mov	r1, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	440b      	add	r3, r1
 80096b8:	3237      	adds	r2, #55	; 0x37
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	3301      	adds	r3, #1
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	4413      	add	r3, r2
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	3301      	adds	r3, #1
 80096d6:	75fb      	strb	r3, [r7, #23]
 80096d8:	7dfa      	ldrb	r2, [r7, #23]
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d3d3      	bcc.n	8009688 <IntToUnicode+0x18>
  }
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	371c      	adds	r7, #28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
	...

080096f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08a      	sub	sp, #40	; 0x28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096f8:	f107 0314 	add.w	r3, r7, #20
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	609a      	str	r2, [r3, #8]
 8009704:	60da      	str	r2, [r3, #12]
 8009706:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009710:	d13a      	bne.n	8009788 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009712:	2300      	movs	r3, #0
 8009714:	613b      	str	r3, [r7, #16]
 8009716:	4b1e      	ldr	r3, [pc, #120]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 8009718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971a:	4a1d      	ldr	r2, [pc, #116]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 800971c:	f043 0301 	orr.w	r3, r3, #1
 8009720:	6313      	str	r3, [r2, #48]	; 0x30
 8009722:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800972e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009734:	2302      	movs	r3, #2
 8009736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009738:	2300      	movs	r3, #0
 800973a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800973c:	2303      	movs	r3, #3
 800973e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009740:	230a      	movs	r3, #10
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009744:	f107 0314 	add.w	r3, r7, #20
 8009748:	4619      	mov	r1, r3
 800974a:	4812      	ldr	r0, [pc, #72]	; (8009794 <HAL_PCD_MspInit+0xa4>)
 800974c:	f7f7 fb6c 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009750:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 8009752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009754:	4a0e      	ldr	r2, [pc, #56]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 8009756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975a:	6353      	str	r3, [r2, #52]	; 0x34
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 8009762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009764:	4a0a      	ldr	r2, [pc, #40]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 8009766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800976a:	6453      	str	r3, [r2, #68]	; 0x44
 800976c:	4b08      	ldr	r3, [pc, #32]	; (8009790 <HAL_PCD_MspInit+0xa0>)
 800976e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009778:	2200      	movs	r2, #0
 800977a:	2100      	movs	r1, #0
 800977c:	2043      	movs	r0, #67	; 0x43
 800977e:	f7f7 faec 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009782:	2043      	movs	r0, #67	; 0x43
 8009784:	f7f7 fb05 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009788:	bf00      	nop
 800978a:	3728      	adds	r7, #40	; 0x28
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	40023800 	.word	0x40023800
 8009794:	40020000 	.word	0x40020000

08009798 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7fe fb79 	bl	8007ea6 <USBD_LL_SetupStage>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80097ce:	78fa      	ldrb	r2, [r7, #3]
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	4619      	mov	r1, r3
 80097e6:	f7fe fbb3 	bl	8007f50 <USBD_LL_DataOutStage>
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009804:	78fa      	ldrb	r2, [r7, #3]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	440b      	add	r3, r1
 8009812:	3320      	adds	r3, #32
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	4619      	mov	r1, r3
 800981a:	f7fe fc4c 	bl	80080b6 <USBD_LL_DataInStage>
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fd86 	bl	8008346 <USBD_LL_SOF>
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800984a:	2301      	movs	r3, #1
 800984c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	79db      	ldrb	r3, [r3, #7]
 8009852:	2b02      	cmp	r3, #2
 8009854:	d001      	beq.n	800985a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009856:	f7f6 ffd3 	bl	8000800 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009860:	7bfa      	ldrb	r2, [r7, #15]
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fd2a 	bl	80082be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe fcd2 	bl	800821a <USBD_LL_Reset>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800988e:	4618      	mov	r0, r3
 8009890:	f7fe fd25 	bl	80082de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098a6:	f043 0301 	orr.w	r3, r3, #1
 80098aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	7adb      	ldrb	r3, [r3, #11]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d005      	beq.n	80098c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098b4:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <HAL_PCD_SuspendCallback+0x48>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4a03      	ldr	r2, [pc, #12]	; (80098c8 <HAL_PCD_SuspendCallback+0x48>)
 80098ba:	f043 0306 	orr.w	r3, r3, #6
 80098be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	e000ed00 	.word	0xe000ed00

080098cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fd1b 	bl	8008316 <USBD_LL_Resume>
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fd73 	bl	80083ea <USBD_LL_IsoOUTIncomplete>
}
 8009904:	bf00      	nop
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800991e:	78fa      	ldrb	r2, [r7, #3]
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fd2f 	bl	8008386 <USBD_LL_IsoINIncomplete>
}
 8009928:	bf00      	nop
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fd85 	bl	800844e <USBD_LL_DevConnected>
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fd82 	bl	8008464 <USBD_LL_DevDisconnected>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d13c      	bne.n	80099f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009978:	4a20      	ldr	r2, [pc, #128]	; (80099fc <USBD_LL_Init+0x94>)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a1e      	ldr	r2, [pc, #120]	; (80099fc <USBD_LL_Init+0x94>)
 8009984:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009988:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <USBD_LL_Init+0x94>)
 800998a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800998e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009990:	4b1a      	ldr	r3, [pc, #104]	; (80099fc <USBD_LL_Init+0x94>)
 8009992:	2204      	movs	r2, #4
 8009994:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009996:	4b19      	ldr	r3, [pc, #100]	; (80099fc <USBD_LL_Init+0x94>)
 8009998:	2202      	movs	r2, #2
 800999a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800999c:	4b17      	ldr	r3, [pc, #92]	; (80099fc <USBD_LL_Init+0x94>)
 800999e:	2200      	movs	r2, #0
 80099a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80099a2:	4b16      	ldr	r3, [pc, #88]	; (80099fc <USBD_LL_Init+0x94>)
 80099a4:	2202      	movs	r2, #2
 80099a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80099a8:	4b14      	ldr	r3, [pc, #80]	; (80099fc <USBD_LL_Init+0x94>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80099ae:	4b13      	ldr	r3, [pc, #76]	; (80099fc <USBD_LL_Init+0x94>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80099b4:	4b11      	ldr	r3, [pc, #68]	; (80099fc <USBD_LL_Init+0x94>)
 80099b6:	2200      	movs	r2, #0
 80099b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80099ba:	4b10      	ldr	r3, [pc, #64]	; (80099fc <USBD_LL_Init+0x94>)
 80099bc:	2200      	movs	r2, #0
 80099be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80099c0:	4b0e      	ldr	r3, [pc, #56]	; (80099fc <USBD_LL_Init+0x94>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80099c6:	480d      	ldr	r0, [pc, #52]	; (80099fc <USBD_LL_Init+0x94>)
 80099c8:	f7fa f8e7 	bl	8003b9a <HAL_PCD_Init>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80099d2:	f7f6 ff15 	bl	8000800 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099d6:	2180      	movs	r1, #128	; 0x80
 80099d8:	4808      	ldr	r0, [pc, #32]	; (80099fc <USBD_LL_Init+0x94>)
 80099da:	f7fb fb12 	bl	8005002 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099de:	2240      	movs	r2, #64	; 0x40
 80099e0:	2100      	movs	r1, #0
 80099e2:	4806      	ldr	r0, [pc, #24]	; (80099fc <USBD_LL_Init+0x94>)
 80099e4:	f7fb fac6 	bl	8004f74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099e8:	2280      	movs	r2, #128	; 0x80
 80099ea:	2101      	movs	r1, #1
 80099ec:	4803      	ldr	r0, [pc, #12]	; (80099fc <USBD_LL_Init+0x94>)
 80099ee:	f7fb fac1 	bl	8004f74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	20000e70 	.word	0x20000e70

08009a00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fa f9ce 	bl	8003db8 <HAL_PCD_Start>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f942 	bl	8009cac <USBD_Get_USB_Status>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4611      	mov	r1, r2
 8009a42:	461a      	mov	r2, r3
 8009a44:	4603      	mov	r3, r0
 8009a46:	70fb      	strb	r3, [r7, #3]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70bb      	strb	r3, [r7, #2]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a5e:	78bb      	ldrb	r3, [r7, #2]
 8009a60:	883a      	ldrh	r2, [r7, #0]
 8009a62:	78f9      	ldrb	r1, [r7, #3]
 8009a64:	f7fa fea2 	bl	80047ac <HAL_PCD_EP_Open>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f91c 	bl	8009cac <USBD_Get_USB_Status>
 8009a74:	4603      	mov	r3, r0
 8009a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a9c:	78fa      	ldrb	r2, [r7, #3]
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fa feeb 	bl	800487c <HAL_PCD_EP_Close>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 f8fd 	bl	8009cac <USBD_Get_USB_Status>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fa ffa3 	bl	8004a2a <HAL_PCD_EP_SetStall>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f8de 	bl	8009cac <USBD_Get_USB_Status>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	460b      	mov	r3, r1
 8009b08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b18:	78fa      	ldrb	r2, [r7, #3]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fa ffe7 	bl	8004af0 <HAL_PCD_EP_ClrStall>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 f8bf 	bl	8009cac <USBD_Get_USB_Status>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	da0b      	bge.n	8009b70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b5e:	68f9      	ldr	r1, [r7, #12]
 8009b60:	4613      	mov	r3, r2
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	3316      	adds	r3, #22
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	e00b      	b.n	8009b88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b76:	68f9      	ldr	r1, [r7, #12]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	440b      	add	r3, r1
 8009b82:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009b86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fa fdd6 	bl	8004764 <HAL_PCD_SetAddress>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 f874 	bl	8009cac <USBD_Get_USB_Status>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b086      	sub	sp, #24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	607a      	str	r2, [r7, #4]
 8009bdc:	603b      	str	r3, [r7, #0]
 8009bde:	460b      	mov	r3, r1
 8009be0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bf0:	7af9      	ldrb	r1, [r7, #11]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	f7fa fede 	bl	80049b6 <HAL_PCD_EP_Transmit>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 f853 	bl	8009cac <USBD_Get_USB_Status>
 8009c06:	4603      	mov	r3, r0
 8009c08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	460b      	mov	r3, r1
 8009c22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c32:	7af9      	ldrb	r1, [r7, #11]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	f7fa fe6a 	bl	8004910 <HAL_PCD_EP_Receive>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f832 	bl	8009cac <USBD_Get_USB_Status>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fa fe8a 	bl	8004986 <HAL_PCD_EP_GetRxCount>
 8009c72:	4603      	mov	r3, r0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c84:	4b03      	ldr	r3, [pc, #12]	; (8009c94 <USBD_static_malloc+0x18>)
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20001354 	.word	0x20001354

08009c98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]

}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d817      	bhi.n	8009cf0 <USBD_Get_USB_Status+0x44>
 8009cc0:	a201      	add	r2, pc, #4	; (adr r2, 8009cc8 <USBD_Get_USB_Status+0x1c>)
 8009cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc6:	bf00      	nop
 8009cc8:	08009cd9 	.word	0x08009cd9
 8009ccc:	08009cdf 	.word	0x08009cdf
 8009cd0:	08009ce5 	.word	0x08009ce5
 8009cd4:	08009ceb 	.word	0x08009ceb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
    break;
 8009cdc:	e00b      	b.n	8009cf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce2:	e008      	b.n	8009cf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce8:	e005      	b.n	8009cf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cea:	2303      	movs	r3, #3
 8009cec:	73fb      	strb	r3, [r7, #15]
    break;
 8009cee:	e002      	b.n	8009cf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf4:	bf00      	nop
  }
  return usb_status;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <__libc_init_array>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	4d0d      	ldr	r5, [pc, #52]	; (8009d3c <__libc_init_array+0x38>)
 8009d08:	4c0d      	ldr	r4, [pc, #52]	; (8009d40 <__libc_init_array+0x3c>)
 8009d0a:	1b64      	subs	r4, r4, r5
 8009d0c:	10a4      	asrs	r4, r4, #2
 8009d0e:	2600      	movs	r6, #0
 8009d10:	42a6      	cmp	r6, r4
 8009d12:	d109      	bne.n	8009d28 <__libc_init_array+0x24>
 8009d14:	4d0b      	ldr	r5, [pc, #44]	; (8009d44 <__libc_init_array+0x40>)
 8009d16:	4c0c      	ldr	r4, [pc, #48]	; (8009d48 <__libc_init_array+0x44>)
 8009d18:	f000 f820 	bl	8009d5c <_init>
 8009d1c:	1b64      	subs	r4, r4, r5
 8009d1e:	10a4      	asrs	r4, r4, #2
 8009d20:	2600      	movs	r6, #0
 8009d22:	42a6      	cmp	r6, r4
 8009d24:	d105      	bne.n	8009d32 <__libc_init_array+0x2e>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d2c:	4798      	blx	r3
 8009d2e:	3601      	adds	r6, #1
 8009d30:	e7ee      	b.n	8009d10 <__libc_init_array+0xc>
 8009d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d36:	4798      	blx	r3
 8009d38:	3601      	adds	r6, #1
 8009d3a:	e7f2      	b.n	8009d22 <__libc_init_array+0x1e>
 8009d3c:	08009edc 	.word	0x08009edc
 8009d40:	08009edc 	.word	0x08009edc
 8009d44:	08009edc 	.word	0x08009edc
 8009d48:	08009ee0 	.word	0x08009ee0

08009d4c <memset>:
 8009d4c:	4402      	add	r2, r0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d100      	bne.n	8009d56 <memset+0xa>
 8009d54:	4770      	bx	lr
 8009d56:	f803 1b01 	strb.w	r1, [r3], #1
 8009d5a:	e7f9      	b.n	8009d50 <memset+0x4>

08009d5c <_init>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	bf00      	nop
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr

08009d68 <_fini>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	bf00      	nop
 8009d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6e:	bc08      	pop	{r3}
 8009d70:	469e      	mov	lr, r3
 8009d72:	4770      	bx	lr
